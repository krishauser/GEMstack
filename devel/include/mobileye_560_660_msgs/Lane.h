// Generated by gencpp from file mobileye_560_660_msgs/Lane.msg
// DO NOT EDIT!


#ifndef MOBILEYE_560_660_MSGS_MESSAGE_LANE_H
#define MOBILEYE_560_660_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mobileye_560_660_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : header()
    , lane_curvature(0.0)
    , lane_heading(0.0)
    , construction_area(false)
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , right_ldw_availability(false)
    , left_ldw_availability(false)  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane_curvature(0.0)
    , lane_heading(0.0)
    , construction_area(false)
    , pitch_angle(0.0)
    , yaw_angle(0.0)
    , right_ldw_availability(false)
    , left_ldw_availability(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _lane_curvature_type;
  _lane_curvature_type lane_curvature;

   typedef double _lane_heading_type;
  _lane_heading_type lane_heading;

   typedef uint8_t _construction_area_type;
  _construction_area_type construction_area;

   typedef double _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef double _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef uint8_t _right_ldw_availability_type;
  _right_ldw_availability_type right_ldw_availability;

   typedef uint8_t _left_ldw_availability_type;
  _left_ldw_availability_type left_ldw_availability;





  typedef boost::shared_ptr< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::mobileye_560_660_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::mobileye_560_660_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::mobileye_560_660_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_560_660_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_560_660_msgs::Lane_<ContainerAllocator1> & lhs, const ::mobileye_560_660_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lane_curvature == rhs.lane_curvature &&
    lhs.lane_heading == rhs.lane_heading &&
    lhs.construction_area == rhs.construction_area &&
    lhs.pitch_angle == rhs.pitch_angle &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.right_ldw_availability == rhs.right_ldw_availability &&
    lhs.left_ldw_availability == rhs.left_ldw_availability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_560_660_msgs::Lane_<ContainerAllocator1> & lhs, const ::mobileye_560_660_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_560_660_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86e77b353e33571bb5143fbccbe07372";
  }

  static const char* value(const ::mobileye_560_660_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86e77b353e33571bULL;
  static const uint64_t static_value2 = 0xb5143fbccbe07372ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_560_660_msgs/Lane";
  }

  static const char* value(const ::mobileye_560_660_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64 lane_curvature\n"
"float64 lane_heading\n"
"bool construction_area\n"
"float64 pitch_angle\n"
"float64 yaw_angle\n"
"bool right_ldw_availability\n"
"bool left_ldw_availability\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mobileye_560_660_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane_curvature);
      stream.next(m.lane_heading);
      stream.next(m.construction_area);
      stream.next(m.pitch_angle);
      stream.next(m.yaw_angle);
      stream.next(m.right_ldw_availability);
      stream.next(m.left_ldw_availability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_560_660_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_560_660_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane_curvature: ";
    Printer<double>::stream(s, indent + "  ", v.lane_curvature);
    s << indent << "lane_heading: ";
    Printer<double>::stream(s, indent + "  ", v.lane_heading);
    s << indent << "construction_area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.construction_area);
    s << indent << "pitch_angle: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "yaw_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "right_ldw_availability: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_ldw_availability);
    s << indent << "left_ldw_availability: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_ldw_availability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_560_660_MSGS_MESSAGE_LANE_H
