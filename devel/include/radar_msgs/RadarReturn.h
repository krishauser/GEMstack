// Generated by gencpp from file radar_msgs/RadarReturn.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADARRETURN_H
#define RADAR_MSGS_MESSAGE_RADARRETURN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radar_msgs
{
template <class ContainerAllocator>
struct RadarReturn_
{
  typedef RadarReturn_<ContainerAllocator> Type;

  RadarReturn_()
    : range(0.0)
    , azimuth(0.0)
    , elevation(0.0)
    , doppler_velocity(0.0)
    , amplitude(0.0)  {
    }
  RadarReturn_(const ContainerAllocator& _alloc)
    : range(0.0)
    , azimuth(0.0)
    , elevation(0.0)
    , doppler_velocity(0.0)
    , amplitude(0.0)  {
  (void)_alloc;
    }



   typedef float _range_type;
  _range_type range;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef float _doppler_velocity_type;
  _doppler_velocity_type doppler_velocity;

   typedef float _amplitude_type;
  _amplitude_type amplitude;





  typedef boost::shared_ptr< ::radar_msgs::RadarReturn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::RadarReturn_<ContainerAllocator> const> ConstPtr;

}; // struct RadarReturn_

typedef ::radar_msgs::RadarReturn_<std::allocator<void> > RadarReturn;

typedef boost::shared_ptr< ::radar_msgs::RadarReturn > RadarReturnPtr;
typedef boost::shared_ptr< ::radar_msgs::RadarReturn const> RadarReturnConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::RadarReturn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::RadarReturn_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_msgs::RadarReturn_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarReturn_<ContainerAllocator2> & rhs)
{
  return lhs.range == rhs.range &&
    lhs.azimuth == rhs.azimuth &&
    lhs.elevation == rhs.elevation &&
    lhs.doppler_velocity == rhs.doppler_velocity &&
    lhs.amplitude == rhs.amplitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_msgs::RadarReturn_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarReturn_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarReturn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarReturn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarReturn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarReturn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarReturn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarReturn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::RadarReturn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2fa6f7b9af80adc27de1892e316aaf6";
  }

  static const char* value(const ::radar_msgs::RadarReturn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2fa6f7b9af80adcULL;
  static const uint64_t static_value2 = 0x27de1892e316aaf6ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::RadarReturn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/RadarReturn";
  }

  static const char* value(const ::radar_msgs::RadarReturn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::RadarReturn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# All variables below are relative to the radar's frame of reference.\n"
"# This message is not meant to be used alone but as part of a stamped or array message.\n"
"\n"
"float32 range                            # Distance (m) from the sensor to the detected return.\n"
"float32 azimuth                          # Angle (in radians) in the azimuth plane between the sensor and the detected return.\n"
"                                         #    Positive angles are anticlockwise from the sensor and negative angles clockwise from the sensor as per REP-0103.\n"
"float32 elevation                        # Angle (in radians) in the elevation plane between the sensor and the detected return.\n"
"                                         #    Negative angles are below the sensor. For 2D radar, this will be 0.\n"
"float32 doppler_velocity                 # The doppler speeds (m/s) of the return.\n"
"float32 amplitude                        # The amplitude of the of the return (dB)\n"
;
  }

  static const char* value(const ::radar_msgs::RadarReturn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::RadarReturn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
      stream.next(m.azimuth);
      stream.next(m.elevation);
      stream.next(m.doppler_velocity);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarReturn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::RadarReturn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::RadarReturn_<ContainerAllocator>& v)
  {
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "doppler_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.doppler_velocity);
    s << indent << "amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADARRETURN_H
