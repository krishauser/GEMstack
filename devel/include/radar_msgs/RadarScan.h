// Generated by gencpp from file radar_msgs/RadarScan.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADARSCAN_H
#define RADAR_MSGS_MESSAGE_RADARSCAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <radar_msgs/RadarReturn.h>

namespace radar_msgs
{
template <class ContainerAllocator>
struct RadarScan_
{
  typedef RadarScan_<ContainerAllocator> Type;

  RadarScan_()
    : header()
    , returns()  {
    }
  RadarScan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , returns(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::radar_msgs::RadarReturn_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::radar_msgs::RadarReturn_<ContainerAllocator> >> _returns_type;
  _returns_type returns;





  typedef boost::shared_ptr< ::radar_msgs::RadarScan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::RadarScan_<ContainerAllocator> const> ConstPtr;

}; // struct RadarScan_

typedef ::radar_msgs::RadarScan_<std::allocator<void> > RadarScan;

typedef boost::shared_ptr< ::radar_msgs::RadarScan > RadarScanPtr;
typedef boost::shared_ptr< ::radar_msgs::RadarScan const> RadarScanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::RadarScan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::RadarScan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_msgs::RadarScan_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarScan_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.returns == rhs.returns;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_msgs::RadarScan_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarScan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarScan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarScan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarScan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarScan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarScan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarScan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::RadarScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6dfacef1e665538dbd8e159d5ce7a97a";
  }

  static const char* value(const ::radar_msgs::RadarScan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6dfacef1e665538dULL;
  static const uint64_t static_value2 = 0xbd8e159d5ce7a97aULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::RadarScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/RadarScan";
  }

  static const char* value(const ::radar_msgs::RadarScan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::RadarScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"radar_msgs/RadarReturn[] returns\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: radar_msgs/RadarReturn\n"
"# All variables below are relative to the radar's frame of reference.\n"
"# This message is not meant to be used alone but as part of a stamped or array message.\n"
"\n"
"float32 range                            # Distance (m) from the sensor to the detected return.\n"
"float32 azimuth                          # Angle (in radians) in the azimuth plane between the sensor and the detected return.\n"
"                                         #    Positive angles are anticlockwise from the sensor and negative angles clockwise from the sensor as per REP-0103.\n"
"float32 elevation                        # Angle (in radians) in the elevation plane between the sensor and the detected return.\n"
"                                         #    Negative angles are below the sensor. For 2D radar, this will be 0.\n"
"float32 doppler_velocity                 # The doppler speeds (m/s) of the return.\n"
"float32 amplitude                        # The amplitude of the of the return (dB)\n"
;
  }

  static const char* value(const ::radar_msgs::RadarScan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::RadarScan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.returns);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarScan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::RadarScan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::RadarScan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "returns[]" << std::endl;
    for (size_t i = 0; i < v.returns.size(); ++i)
    {
      s << indent << "  returns[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::radar_msgs::RadarReturn_<ContainerAllocator> >::stream(s, indent + "    ", v.returns[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADARSCAN_H
