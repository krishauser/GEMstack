// Generated by gencpp from file radar_msgs/RadarTrack.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADARTRACK_H
#define RADAR_MSGS_MESSAGE_RADARTRACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuid_msgs/UniqueID.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace radar_msgs
{
template <class ContainerAllocator>
struct RadarTrack_
{
  typedef RadarTrack_<ContainerAllocator> Type;

  RadarTrack_()
    : uuid()
    , position()
    , velocity()
    , acceleration()
    , size()
    , classification(0)
    , position_covariance()
    , velocity_covariance()
    , acceleration_covariance()
    , size_covariance()  {
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);

      acceleration_covariance.assign(0.0);

      size_covariance.assign(0.0);
  }
  RadarTrack_(const ContainerAllocator& _alloc)
    : uuid(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , size(_alloc)
    , classification(0)
    , position_covariance()
    , velocity_covariance()
    , acceleration_covariance()
    , size_covariance()  {
  (void)_alloc;
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);

      acceleration_covariance.assign(0.0);

      size_covariance.assign(0.0);
  }



   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _uuid_type;
  _uuid_type uuid;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef uint16_t _classification_type;
  _classification_type classification;

   typedef boost::array<float, 6>  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef boost::array<float, 6>  _velocity_covariance_type;
  _velocity_covariance_type velocity_covariance;

   typedef boost::array<float, 6>  _acceleration_covariance_type;
  _acceleration_covariance_type acceleration_covariance;

   typedef boost::array<float, 6>  _size_covariance_type;
  _size_covariance_type size_covariance;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_CLASSIFICATION)
  #undef NO_CLASSIFICATION
#endif
#if defined(_WIN32) && defined(STATIC)
  #undef STATIC
#endif
#if defined(_WIN32) && defined(DYNAMIC)
  #undef DYNAMIC
#endif

  enum {
    NO_CLASSIFICATION = 0u,
    STATIC = 1u,
    DYNAMIC = 2u,
  };


  typedef boost::shared_ptr< ::radar_msgs::RadarTrack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::RadarTrack_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTrack_

typedef ::radar_msgs::RadarTrack_<std::allocator<void> > RadarTrack;

typedef boost::shared_ptr< ::radar_msgs::RadarTrack > RadarTrackPtr;
typedef boost::shared_ptr< ::radar_msgs::RadarTrack const> RadarTrackConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::RadarTrack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::RadarTrack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_msgs::RadarTrack_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarTrack_<ContainerAllocator2> & rhs)
{
  return lhs.uuid == rhs.uuid &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.size == rhs.size &&
    lhs.classification == rhs.classification &&
    lhs.position_covariance == rhs.position_covariance &&
    lhs.velocity_covariance == rhs.velocity_covariance &&
    lhs.acceleration_covariance == rhs.acceleration_covariance &&
    lhs.size_covariance == rhs.size_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_msgs::RadarTrack_<ContainerAllocator1> & lhs, const ::radar_msgs::RadarTrack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarTrack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarTrack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::RadarTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3344659e36aff40bd4f09e82be663ec5";
  }

  static const char* value(const ::radar_msgs::RadarTrack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3344659e36aff40bULL;
  static const uint64_t static_value2 = 0xd4f09e82be663ec5ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::RadarTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/RadarTrack";
  }

  static const char* value(const ::radar_msgs::RadarTrack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::RadarTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message relates only to FMCW radar.  \n"
"# All variables below are relative to the radar's frame of reference.\n"
"# This message is not meant to be used alone but as part of a stamped or array message.\n"
"\n"
"# Object classifications (Additional vendor-specific classifications are permitted starting from 32000 eg. Car)\n"
"uint16 NO_CLASSIFICATION=0\n"
"uint16 STATIC=1\n"
"uint16 DYNAMIC=2\n"
"\n"
"\n"
"uuid_msgs/UniqueID uuid                     # A unique ID of the object generated by the radar.\n"
"\n"
"                                            # Note: The z component of these fields is ignored for 2D tracking.\n"
"geometry_msgs/Point position                # x, y, z coordinates of the centroid of the object being tracked.\n"
"geometry_msgs/Vector3 velocity              # The velocity of the object in each spatial dimension.\n"
"geometry_msgs/Vector3 acceleration          # The acceleration of the object in each spatial dimension.\n"
"geometry_msgs/Vector3 size                  # The object size as represented by the radar sensor eg. length, width, height OR the diameter of an ellipsoid in the x, y, z, dimensions\n"
"                                            # and is from the sensor frame's view.\n"
"uint16 classification                       # An optional classification of the object (see above)\n"
"float32[6] position_covariance              # Upper-triangle covariance about the x, y, z axes\n"
"float32[6] velocity_covariance              # Upper-triangle covariance about the x, y, z axes\n"
"float32[6] acceleration_covariance          # Upper-triangle covariance about the x, y, z axes\n"
"float32[6] size_covariance                  # Upper-triangle covariance about the x, y, z axes\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::radar_msgs::RadarTrack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::RadarTrack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uuid);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.size);
      stream.next(m.classification);
      stream.next(m.position_covariance);
      stream.next(m.velocity_covariance);
      stream.next(m.acceleration_covariance);
      stream.next(m.size_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTrack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::RadarTrack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::RadarTrack_<ContainerAllocator>& v)
  {
    s << indent << "uuid: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.uuid);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "classification: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.classification);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covariance.size(); ++i)
    {
      s << indent << "  velocity_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_covariance[i]);
    }
    s << indent << "acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.acceleration_covariance.size(); ++i)
    {
      s << indent << "  acceleration_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration_covariance[i]);
    }
    s << indent << "size_covariance[]" << std::endl;
    for (size_t i = 0; i < v.size_covariance.size(); ++i)
    {
      s << indent << "  size_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.size_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADARTRACK_H
