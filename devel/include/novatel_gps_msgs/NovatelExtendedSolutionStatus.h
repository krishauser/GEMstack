// Generated by gencpp from file novatel_gps_msgs/NovatelExtendedSolutionStatus.msg
// DO NOT EDIT!


#ifndef NOVATEL_GPS_MSGS_MESSAGE_NOVATELEXTENDEDSOLUTIONSTATUS_H
#define NOVATEL_GPS_MSGS_MESSAGE_NOVATELEXTENDEDSOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_gps_msgs
{
template <class ContainerAllocator>
struct NovatelExtendedSolutionStatus_
{
  typedef NovatelExtendedSolutionStatus_<ContainerAllocator> Type;

  NovatelExtendedSolutionStatus_()
    : original_mask(0)
    , advance_rtk_verified(false)
    , psuedorange_iono_correction()  {
    }
  NovatelExtendedSolutionStatus_(const ContainerAllocator& _alloc)
    : original_mask(0)
    , advance_rtk_verified(false)
    , psuedorange_iono_correction(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _original_mask_type;
  _original_mask_type original_mask;

   typedef uint8_t _advance_rtk_verified_type;
  _advance_rtk_verified_type advance_rtk_verified;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _psuedorange_iono_correction_type;
  _psuedorange_iono_correction_type psuedorange_iono_correction;





  typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct NovatelExtendedSolutionStatus_

typedef ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<std::allocator<void> > NovatelExtendedSolutionStatus;

typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelExtendedSolutionStatus > NovatelExtendedSolutionStatusPtr;
typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelExtendedSolutionStatus const> NovatelExtendedSolutionStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.original_mask == rhs.original_mask &&
    lhs.advance_rtk_verified == rhs.advance_rtk_verified &&
    lhs.psuedorange_iono_correction == rhs.psuedorange_iono_correction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_gps_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0e19d53094c207c4dafdfbde750c4b1";
  }

  static const char* value(const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0e19d53094c207cULL;
  static const uint64_t static_value2 = 0x4dafdfbde750c4b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_gps_msgs/NovatelExtendedSolutionStatus";
  }

  static const char* value(const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bit    Mask      Description\n"
"#  0     0x01      Advance RTK verified (0 = not verified, 1 = verified)\n"
"# 1-3    0x0E      Pseudorange Ionosphere Correction\n"
"#                    0 = unknown\n"
"#                    1 = Klobuchar Broadcast\n"
"#                    2 = SBAS Broadcast\n"
"#                    3 = Multi-frequency Computed\n"
"#                    4 = PSRDiff Correction\n"
"#                    5 = NovaTel Blended Ionosphere Value\n"
"# 4-7  0xF0        <Reserved>\n"
"uint32 original_mask\n"
"bool advance_rtk_verified\n"
"string psuedorange_iono_correction\n"
;
  }

  static const char* value(const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.original_mask);
      stream.next(m.advance_rtk_verified);
      stream.next(m.psuedorange_iono_correction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NovatelExtendedSolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "original_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.original_mask);
    s << indent << "advance_rtk_verified: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.advance_rtk_verified);
    s << indent << "psuedorange_iono_correction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.psuedorange_iono_correction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_GPS_MSGS_MESSAGE_NOVATELEXTENDEDSOLUTIONSTATUS_H
