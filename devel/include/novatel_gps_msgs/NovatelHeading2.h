// Generated by gencpp from file novatel_gps_msgs/NovatelHeading2.msg
// DO NOT EDIT!


#ifndef NOVATEL_GPS_MSGS_MESSAGE_NOVATELHEADING2_H
#define NOVATEL_GPS_MSGS_MESSAGE_NOVATELHEADING2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_gps_msgs/NovatelMessageHeader.h>
#include <novatel_gps_msgs/NovatelExtendedSolutionStatus.h>
#include <novatel_gps_msgs/NovatelSignalMask.h>

namespace novatel_gps_msgs
{
template <class ContainerAllocator>
struct NovatelHeading2_
{
  typedef NovatelHeading2_<ContainerAllocator> Type;

  NovatelHeading2_()
    : header()
    , novatel_msg_header()
    , solution_status()
    , position_type()
    , baseline_length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , heading_sigma(0.0)
    , pitch_sigma(0.0)
    , rover_station_id()
    , master_station_id()
    , num_satellites_tracked(0)
    , num_satellites_used_in_solution(0)
    , num_satellites_above_elevation_mask_angle(0)
    , num_satellites_above_elevation_mask_angle_l2(0)
    , solution_source(0)
    , extended_solution_status()
    , signal_mask()  {
    }
  NovatelHeading2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , novatel_msg_header(_alloc)
    , solution_status(_alloc)
    , position_type(_alloc)
    , baseline_length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , heading_sigma(0.0)
    , pitch_sigma(0.0)
    , rover_station_id(_alloc)
    , master_station_id(_alloc)
    , num_satellites_tracked(0)
    , num_satellites_used_in_solution(0)
    , num_satellites_above_elevation_mask_angle(0)
    , num_satellites_above_elevation_mask_angle_l2(0)
    , solution_source(0)
    , extended_solution_status(_alloc)
    , signal_mask(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_gps_msgs::NovatelMessageHeader_<ContainerAllocator>  _novatel_msg_header_type;
  _novatel_msg_header_type novatel_msg_header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _solution_status_type;
  _solution_status_type solution_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _position_type_type;
  _position_type_type position_type;

   typedef float _baseline_length_type;
  _baseline_length_type baseline_length;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _heading_sigma_type;
  _heading_sigma_type heading_sigma;

   typedef float _pitch_sigma_type;
  _pitch_sigma_type pitch_sigma;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rover_station_id_type;
  _rover_station_id_type rover_station_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _master_station_id_type;
  _master_station_id_type master_station_id;

   typedef uint8_t _num_satellites_tracked_type;
  _num_satellites_tracked_type num_satellites_tracked;

   typedef uint8_t _num_satellites_used_in_solution_type;
  _num_satellites_used_in_solution_type num_satellites_used_in_solution;

   typedef uint8_t _num_satellites_above_elevation_mask_angle_type;
  _num_satellites_above_elevation_mask_angle_type num_satellites_above_elevation_mask_angle;

   typedef uint8_t _num_satellites_above_elevation_mask_angle_l2_type;
  _num_satellites_above_elevation_mask_angle_l2_type num_satellites_above_elevation_mask_angle_l2;

   typedef uint8_t _solution_source_type;
  _solution_source_type solution_source;

   typedef  ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator>  _extended_solution_status_type;
  _extended_solution_status_type extended_solution_status;

   typedef  ::novatel_gps_msgs::NovatelSignalMask_<ContainerAllocator>  _signal_mask_type;
  _signal_mask_type signal_mask;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SOURCE_PRIMARY_ANTENNA)
  #undef SOURCE_PRIMARY_ANTENNA
#endif
#if defined(_WIN32) && defined(SOURCE_SECONDARY_ANTENNA)
  #undef SOURCE_SECONDARY_ANTENNA
#endif

  enum {
    SOURCE_PRIMARY_ANTENNA = 0u,
    SOURCE_SECONDARY_ANTENNA = 1u,
  };


  typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> const> ConstPtr;

}; // struct NovatelHeading2_

typedef ::novatel_gps_msgs::NovatelHeading2_<std::allocator<void> > NovatelHeading2;

typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelHeading2 > NovatelHeading2Ptr;
typedef boost::shared_ptr< ::novatel_gps_msgs::NovatelHeading2 const> NovatelHeading2ConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator1> & lhs, const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.novatel_msg_header == rhs.novatel_msg_header &&
    lhs.solution_status == rhs.solution_status &&
    lhs.position_type == rhs.position_type &&
    lhs.baseline_length == rhs.baseline_length &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.heading_sigma == rhs.heading_sigma &&
    lhs.pitch_sigma == rhs.pitch_sigma &&
    lhs.rover_station_id == rhs.rover_station_id &&
    lhs.master_station_id == rhs.master_station_id &&
    lhs.num_satellites_tracked == rhs.num_satellites_tracked &&
    lhs.num_satellites_used_in_solution == rhs.num_satellites_used_in_solution &&
    lhs.num_satellites_above_elevation_mask_angle == rhs.num_satellites_above_elevation_mask_angle &&
    lhs.num_satellites_above_elevation_mask_angle_l2 == rhs.num_satellites_above_elevation_mask_angle_l2 &&
    lhs.solution_source == rhs.solution_source &&
    lhs.extended_solution_status == rhs.extended_solution_status &&
    lhs.signal_mask == rhs.signal_mask;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator1> & lhs, const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_gps_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1195c3bddd7a9ddbaf770e688a2f354a";
  }

  static const char* value(const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1195c3bddd7a9ddbULL;
  static const uint64_t static_value2 = 0xaf770e688a2f354aULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_gps_msgs/NovatelHeading2";
  }

  static const char* value(const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Parsed Heading East of North from Novatel receiver. Only ALIGN capable recievers can publish this\n"
"Header header\n"
"\n"
"NovatelMessageHeader novatel_msg_header\n"
"\n"
"# Solution Status\n"
"string solution_status\n"
"string position_type\n"
"\n"
"# Baseline length (m)\n"
"float32 baseline_length\n"
"\n"
"# Heading in degrees [0,360)\n"
"float32 heading\n"
"\n"
"# Pitch in degrees +- 90\n"
"float32 pitch\n"
"\n"
"# Orientation Standard Deviations (deg)\n"
"float32 heading_sigma\n"
"float32 pitch_sigma\n"
"\n"
"# Station ids\n"
"string rover_station_id\n"
"string master_station_id\n"
"\n"
"# Satellite Usage\n"
"uint8 num_satellites_tracked\n"
"uint8 num_satellites_used_in_solution\n"
"uint8 num_satellites_above_elevation_mask_angle\n"
"uint8 num_satellites_above_elevation_mask_angle_l2\n"
"\n"
"# Enum for solution source\n"
"uint8 solution_source\n"
"\n"
"uint8 SOURCE_PRIMARY_ANTENNA=0\n"
"uint8 SOURCE_SECONDARY_ANTENNA=1\n"
"\n"
"# Extended Solution Status\n"
"NovatelExtendedSolutionStatus extended_solution_status\n"
"\n"
"# Signal Masks\n"
"NovatelSignalMask signal_mask\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_gps_msgs/NovatelMessageHeader\n"
"# Novatel Message Header\n"
"\n"
"string message_name\n"
"string port\n"
"uint32 sequence_num\n"
"float32 percent_idle_time\n"
"string gps_time_status\n"
"uint32 gps_week_num\n"
"float64 gps_seconds\n"
"\n"
"# Bit       Mask      Description\n"
"#  0     0x00000001   Error flag (Bit = 0: No Error, Bit = 1: Error)\n"
"#  1     0x00000002   Temperature Status (0: Within Spec, 1: Warning)\n"
"#  2     0x00000004   Voltage Supply Status (0: OK, 1: Warning)\n"
"#  3     0x00000008   Antenna Power Status (0: Powered, 1: Not Powered)\n"
"#  4     0x00000010   <Reserved>\n"
"#  5     0x00000020   Antenna open flag (0: OK, 1: Open)\n"
"#  6     0x00000040   Antenna shorted flag (0: OK, 1: Shorted)\n"
"#  7     0x00000080   CPU overload flag\n"
"#  8     0x00000100   COM1 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  9     0x00000200   COM2 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  10    0x00000400   COM3 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  11    0x00000800   USB buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  12    0x00001000   <Reserved>\n"
"#  13    0x00002000   <Reserved>\n"
"#  14    0x00004000   <Reserved>\n"
"#  15    0x00008000   RF1 AGC Status (0: OK, 1: Bad)\n"
"#  16    0x00010000   <Reserverd>\n"
"#  17    0x00020000   RF2 AGC status (0: OK, 1: Bad)\n"
"#  18    0x00040000   Almanac flag/UTC known (0: Valid, 1: Invalid)\n"
"#  19    0x00080000   Position solution flag (0: Valid, 1: Invalid)\n"
"#  20    0x00100000   Position fixed flag (0: Not fixed, 1: Fixed)\n"
"#  21    0x00200000   Clock steering status (0: Enabled, 1: Disabled)\n"
"#  22    0x00400000   Clock model flag (0: Valid, 1: Invalid)\n"
"#  23    0x00800000   OEMV external oscillator flag (0: Disabled, 1: Enabled)\n"
"#  24    0x01000000   Software resource (0: OK, 1: Warning)\n"
"#  25    0x02000000   <Reserved>\n"
"#  26    0x04000000   <Reserved>\n"
"#  27    0x08000000   <Reserved>\n"
"#  28    0x10000000   <Reserved>\n"
"#  29    0x20000000   Auxiliary 3 status event flag (0: No event, 1: Event)\n"
"#  30    0x40000000   Auxiliary 2 status event flag (0: No event, 1: Event)\n"
"#  31    0x80000000   Auxiliary 1 status event flag (0: No event, 1: Event)\n"
"NovatelReceiverStatus receiver_status\n"
"\n"
"# Receiver build number (0-65535)\n"
"uint32 receiver_software_version\n"
"================================================================================\n"
"MSG: novatel_gps_msgs/NovatelReceiverStatus\n"
"# From the original Novatel receiver status message bitfield\n"
"#  0     0x00000001   Error flag (Bit = 0: No Error, Bit = 1: Error)\n"
"#  1     0x00000002   Temperature Status (0: Within Spec, 1: Warning)\n"
"#  2     0x00000004   Voltage Supply Status (0: OK, 1: Warning)\n"
"#  3     0x00000008   Antenna Power Status (0: Powered, 1: Not Powered)\n"
"#  4     0x00000010   <Reserved>\n"
"#  5     0x00000020   Antenna open flag (0: OK, 1: Open)\n"
"#  6     0x00000040   Antenna shorted flag (0: OK, 1: Shorted)\n"
"#  7     0x00000080   CPU overload flag\n"
"#  8     0x00000100   COM1 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  9     0x00000200   COM2 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  10    0x00000400   COM3 buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  11    0x00000800   USB buffer overrun flag (0: No overrun, 1: Overrun)\n"
"#  12    0x00001000   <Reserved>\n"
"#  13    0x00002000   <Reserved>\n"
"#  14    0x00004000   <Reserved>\n"
"#  15    0x00008000   RF1 AGC Status (0: OK, 1: Bad)\n"
"#  16    0x00010000   <Reserverd>\n"
"#  17    0x00020000   RF2 AGC status (0: OK, 1: Bad)\n"
"#  18    0x00040000   Almanac flag/UTC known (0: Valid, 1: Invalid)\n"
"#  19    0x00080000   Position solution flag (0: Valid, 1: Invalid)\n"
"#  20    0x00100000   Position fixed flag (0: Not fixed, 1: Fixed)\n"
"#  21    0x00200000   Clock steering status (0: Enabled, 1: Disabled)\n"
"#  22    0x00400000   Clock model flag (0: Valid, 1: Invalid)\n"
"#  23    0x00800000   OEMV external oscillator flag (0: Disabled, 1: Enabled)\n"
"#  24    0x01000000   Software resource (0: OK, 1: Warning)\n"
"#  25    0x02000000   <Reserved>\n"
"#  26    0x04000000   <Reserved>\n"
"#  27    0x08000000   <Reserved>\n"
"#  28    0x10000000   <Reserved>\n"
"#  29    0x20000000   Auxiliary 3 status event flag (0: No event, 1: Event)\n"
"#  30    0x40000000   Auxiliary 2 status event flag (0: No event, 1: Event)\n"
"#  31    0x80000000   Auxiliary 1 status event flag (0: No event, 1: Event)\n"
"uint32 original_status_code\n"
"bool error_flag\n"
"bool temperature_flag\n"
"bool voltage_supply_flag\n"
"bool antenna_powered\n"
"bool antenna_is_open\n"
"bool antenna_is_shorted\n"
"bool cpu_overload_flag\n"
"bool com1_buffer_overrun\n"
"bool com2_buffer_overrun\n"
"bool com3_buffer_overrun\n"
"bool usb_buffer_overrun\n"
"bool rf1_agc_flag\n"
"bool rf2_agc_flag\n"
"bool almanac_flag\n"
"bool position_solution_flag\n"
"bool position_fixed_flag\n"
"bool clock_steering_status_enabled\n"
"bool clock_model_flag\n"
"bool oemv_external_oscillator_flag\n"
"bool software_resource_flag\n"
"bool aux1_status_event_flag\n"
"bool aux2_status_event_flag\n"
"bool aux3_status_event_flag\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_gps_msgs/NovatelExtendedSolutionStatus\n"
"# Bit    Mask      Description\n"
"#  0     0x01      Advance RTK verified (0 = not verified, 1 = verified)\n"
"# 1-3    0x0E      Pseudorange Ionosphere Correction\n"
"#                    0 = unknown\n"
"#                    1 = Klobuchar Broadcast\n"
"#                    2 = SBAS Broadcast\n"
"#                    3 = Multi-frequency Computed\n"
"#                    4 = PSRDiff Correction\n"
"#                    5 = NovaTel Blended Ionosphere Value\n"
"# 4-7  0xF0        <Reserved>\n"
"uint32 original_mask\n"
"bool advance_rtk_verified\n"
"string psuedorange_iono_correction\n"
"\n"
"================================================================================\n"
"MSG: novatel_gps_msgs/NovatelSignalMask\n"
"# Bit    Mask      Description\n"
"#  0     0x01      GPS L1 used in Solution\n"
"#  1     0x02      GPS L2 used in Solution\n"
"#  2     0x04      GPS L5 used in Solution\n"
"#  3     0x08      <Reserved>\n"
"#  4     0x10      GLONASS L1 used in Solution\n"
"#  5     0x20      GLONASS L2 used in Solution\n"
"# 6-7  0x40-0x80   <Reserved>\n"
"uint32 original_mask\n"
"bool gps_L1_used_in_solution\n"
"bool gps_L2_used_in_solution\n"
"bool gps_L3_used_in_solution\n"
"bool glonass_L1_used_in_solution\n"
"bool glonass_L2_used_in_solution\n"
;
  }

  static const char* value(const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.novatel_msg_header);
      stream.next(m.solution_status);
      stream.next(m.position_type);
      stream.next(m.baseline_length);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.heading_sigma);
      stream.next(m.pitch_sigma);
      stream.next(m.rover_station_id);
      stream.next(m.master_station_id);
      stream.next(m.num_satellites_tracked);
      stream.next(m.num_satellites_used_in_solution);
      stream.next(m.num_satellites_above_elevation_mask_angle);
      stream.next(m.num_satellites_above_elevation_mask_angle_l2);
      stream.next(m.solution_source);
      stream.next(m.extended_solution_status);
      stream.next(m.signal_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NovatelHeading2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_gps_msgs::NovatelHeading2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "novatel_msg_header: ";
    s << std::endl;
    Printer< ::novatel_gps_msgs::NovatelMessageHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.novatel_msg_header);
    s << indent << "solution_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.solution_status);
    s << indent << "position_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.position_type);
    s << indent << "baseline_length: ";
    Printer<float>::stream(s, indent + "  ", v.baseline_length);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading_sigma: ";
    Printer<float>::stream(s, indent + "  ", v.heading_sigma);
    s << indent << "pitch_sigma: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_sigma);
    s << indent << "rover_station_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rover_station_id);
    s << indent << "master_station_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.master_station_id);
    s << indent << "num_satellites_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_tracked);
    s << indent << "num_satellites_used_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_used_in_solution);
    s << indent << "num_satellites_above_elevation_mask_angle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_above_elevation_mask_angle);
    s << indent << "num_satellites_above_elevation_mask_angle_l2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_above_elevation_mask_angle_l2);
    s << indent << "solution_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_source);
    s << indent << "extended_solution_status: ";
    s << std::endl;
    Printer< ::novatel_gps_msgs::NovatelExtendedSolutionStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.extended_solution_status);
    s << indent << "signal_mask: ";
    s << std::endl;
    Printer< ::novatel_gps_msgs::NovatelSignalMask_<ContainerAllocator> >::stream(s, indent + "  ", v.signal_mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_GPS_MSGS_MESSAGE_NOVATELHEADING2_H
