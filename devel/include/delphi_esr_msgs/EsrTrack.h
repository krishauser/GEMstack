// Generated by gencpp from file delphi_esr_msgs/EsrTrack.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRTRACK_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRTRACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrTrack_
{
  typedef EsrTrack_<ContainerAllocator> Type;

  EsrTrack_()
    : header()
    , canmsg()
    , id(0)
    , lat_rate(0.0)
    , grouping_changed(false)
    , oncoming(false)
    , status(0)
    , angle(0.0)
    , range(0.0)
    , bridge_object(false)
    , rolling_count(false)
    , width(0.0)
    , range_accel(0.0)
    , med_range_mode(0)
    , range_rate(0.0)  {
    }
  EsrTrack_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , id(0)
    , lat_rate(0.0)
    , grouping_changed(false)
    , oncoming(false)
    , status(0)
    , angle(0.0)
    , range(0.0)
    , bridge_object(false)
    , rolling_count(false)
    , width(0.0)
    , range_accel(0.0)
    , med_range_mode(0)
    , range_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _lat_rate_type;
  _lat_rate_type lat_rate;

   typedef uint8_t _grouping_changed_type;
  _grouping_changed_type grouping_changed;

   typedef uint8_t _oncoming_type;
  _oncoming_type oncoming;

   typedef uint8_t _status_type;
  _status_type status;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _range_type;
  _range_type range;

   typedef uint8_t _bridge_object_type;
  _bridge_object_type bridge_object;

   typedef uint8_t _rolling_count_type;
  _rolling_count_type rolling_count;

   typedef float _width_type;
  _width_type width;

   typedef float _range_accel_type;
  _range_accel_type range_accel;

   typedef uint8_t _med_range_mode_type;
  _med_range_mode_type med_range_mode;

   typedef float _range_rate_type;
  _range_rate_type range_rate;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> const> ConstPtr;

}; // struct EsrTrack_

typedef ::delphi_esr_msgs::EsrTrack_<std::allocator<void> > EsrTrack;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrack > EsrTrackPtr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrack const> EsrTrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.id == rhs.id &&
    lhs.lat_rate == rhs.lat_rate &&
    lhs.grouping_changed == rhs.grouping_changed &&
    lhs.oncoming == rhs.oncoming &&
    lhs.status == rhs.status &&
    lhs.angle == rhs.angle &&
    lhs.range == rhs.range &&
    lhs.bridge_object == rhs.bridge_object &&
    lhs.rolling_count == rhs.rolling_count &&
    lhs.width == rhs.width &&
    lhs.range_accel == rhs.range_accel &&
    lhs.med_range_mode == rhs.med_range_mode &&
    lhs.range_rate == rhs.range_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbcd2eea001ab20b27c9a37e555910ae";
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbcd2eea001ab20bULL;
  static const uint64_t static_value2 = 0x27c9a37e555910aeULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrTrack";
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Track\n"
"string        canmsg\n"
"\n"
"uint8         id\n"
"float32       lat_rate\n"
"bool          grouping_changed\n"
"bool          oncoming\n"
"uint8         status\n"
"float32       angle\n"
"float32       range\n"
"bool          bridge_object\n"
"bool          rolling_count\n"
"float32       width\n"
"float32       range_accel\n"
"uint8         med_range_mode\n"
"float32       range_rate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.id);
      stream.next(m.lat_rate);
      stream.next(m.grouping_changed);
      stream.next(m.oncoming);
      stream.next(m.status);
      stream.next(m.angle);
      stream.next(m.range);
      stream.next(m.bridge_object);
      stream.next(m.rolling_count);
      stream.next(m.width);
      stream.next(m.range_accel);
      stream.next(m.med_range_mode);
      stream.next(m.range_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrTrack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrTrack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrTrack_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.canmsg);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "lat_rate: ";
    Printer<float>::stream(s, indent + "  ", v.lat_rate);
    s << indent << "grouping_changed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grouping_changed);
    s << indent << "oncoming: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.oncoming);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "bridge_object: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bridge_object);
    s << indent << "rolling_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_count);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "range_accel: ";
    Printer<float>::stream(s, indent + "  ", v.range_accel);
    s << indent << "med_range_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.med_range_mode);
    s << indent << "range_rate: ";
    Printer<float>::stream(s, indent + "  ", v.range_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRTRACK_H
