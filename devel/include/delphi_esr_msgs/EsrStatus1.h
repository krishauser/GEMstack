// Generated by gencpp from file delphi_esr_msgs/EsrStatus1.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS1_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus1_
{
  typedef EsrStatus1_<ContainerAllocator> Type;

  EsrStatus1_()
    : header()
    , canmsg()
    , rolling_count_1(0)
    , dsp_timestamp(0)
    , comm_error(false)
    , radius_curvature_calc(0)
    , scan_index(0)
    , yaw_rate_calc(0.0)
    , vehicle_speed_calc(0.0)  {
    }
  EsrStatus1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , rolling_count_1(0)
    , dsp_timestamp(0)
    , comm_error(false)
    , radius_curvature_calc(0)
    , scan_index(0)
    , yaw_rate_calc(0.0)
    , vehicle_speed_calc(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _rolling_count_1_type;
  _rolling_count_1_type rolling_count_1;

   typedef uint8_t _dsp_timestamp_type;
  _dsp_timestamp_type dsp_timestamp;

   typedef uint8_t _comm_error_type;
  _comm_error_type comm_error;

   typedef int16_t _radius_curvature_calc_type;
  _radius_curvature_calc_type radius_curvature_calc;

   typedef uint16_t _scan_index_type;
  _scan_index_type scan_index;

   typedef float _yaw_rate_calc_type;
  _yaw_rate_calc_type yaw_rate_calc;

   typedef float _vehicle_speed_calc_type;
  _vehicle_speed_calc_type vehicle_speed_calc;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus1_

typedef ::delphi_esr_msgs::EsrStatus1_<std::allocator<void> > EsrStatus1;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus1 > EsrStatus1Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus1 const> EsrStatus1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.rolling_count_1 == rhs.rolling_count_1 &&
    lhs.dsp_timestamp == rhs.dsp_timestamp &&
    lhs.comm_error == rhs.comm_error &&
    lhs.radius_curvature_calc == rhs.radius_curvature_calc &&
    lhs.scan_index == rhs.scan_index &&
    lhs.yaw_rate_calc == rhs.yaw_rate_calc &&
    lhs.vehicle_speed_calc == rhs.vehicle_speed_calc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3f440bdd87b7ce3da2d8d915a5970b7";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3f440bdd87b7ce3ULL;
  static const uint64_t static_value2 = 0xda2d8d915a5970b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus1";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Status1\n"
"string      canmsg\n"
"\n"
"uint8       rolling_count_1\n"
"uint8       dsp_timestamp\n"
"bool        comm_error\n"
"int16       radius_curvature_calc\n"
"uint16      scan_index\n"
"float32     yaw_rate_calc\n"
"float32     vehicle_speed_calc\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.rolling_count_1);
      stream.next(m.dsp_timestamp);
      stream.next(m.comm_error);
      stream.next(m.radius_curvature_calc);
      stream.next(m.scan_index);
      stream.next(m.yaw_rate_calc);
      stream.next(m.vehicle_speed_calc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.canmsg);
    s << indent << "rolling_count_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_count_1);
    s << indent << "dsp_timestamp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dsp_timestamp);
    s << indent << "comm_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.comm_error);
    s << indent << "radius_curvature_calc: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radius_curvature_calc);
    s << indent << "scan_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_index);
    s << indent << "yaw_rate_calc: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_calc);
    s << indent << "vehicle_speed_calc: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_speed_calc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS1_H
