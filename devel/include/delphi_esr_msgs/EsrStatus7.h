// Generated by gencpp from file delphi_esr_msgs/EsrStatus7.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus7_
{
  typedef EsrStatus7_<ContainerAllocator> Type;

  EsrStatus7_()
    : header()
    , canmsg()
    , active_fault_0(0)
    , active_fault_1(0)
    , active_fault_2(0)
    , active_fault_3(0)
    , active_fault_4(0)
    , active_fault_5(0)
    , active_fault_6(0)
    , active_fault_7(0)  {
    }
  EsrStatus7_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , active_fault_0(0)
    , active_fault_1(0)
    , active_fault_2(0)
    , active_fault_3(0)
    , active_fault_4(0)
    , active_fault_5(0)
    , active_fault_6(0)
    , active_fault_7(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _active_fault_0_type;
  _active_fault_0_type active_fault_0;

   typedef uint8_t _active_fault_1_type;
  _active_fault_1_type active_fault_1;

   typedef uint8_t _active_fault_2_type;
  _active_fault_2_type active_fault_2;

   typedef uint8_t _active_fault_3_type;
  _active_fault_3_type active_fault_3;

   typedef uint8_t _active_fault_4_type;
  _active_fault_4_type active_fault_4;

   typedef uint8_t _active_fault_5_type;
  _active_fault_5_type active_fault_5;

   typedef uint8_t _active_fault_6_type;
  _active_fault_6_type active_fault_6;

   typedef uint8_t _active_fault_7_type;
  _active_fault_7_type active_fault_7;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus7_

typedef ::delphi_esr_msgs::EsrStatus7_<std::allocator<void> > EsrStatus7;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7 > EsrStatus7Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7 const> EsrStatus7ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.active_fault_0 == rhs.active_fault_0 &&
    lhs.active_fault_1 == rhs.active_fault_1 &&
    lhs.active_fault_2 == rhs.active_fault_2 &&
    lhs.active_fault_3 == rhs.active_fault_3 &&
    lhs.active_fault_4 == rhs.active_fault_4 &&
    lhs.active_fault_5 == rhs.active_fault_5 &&
    lhs.active_fault_6 == rhs.active_fault_6 &&
    lhs.active_fault_7 == rhs.active_fault_7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efea194815b3f2819d7621dea7eb3923";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefea194815b3f281ULL;
  static const uint64_t static_value2 = 0x9d7621dea7eb3923ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus7";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Status7\n"
"string      canmsg\n"
"\n"
"uint8       active_fault_0\n"
"uint8       active_fault_1\n"
"uint8       active_fault_2\n"
"uint8       active_fault_3\n"
"uint8       active_fault_4\n"
"uint8       active_fault_5\n"
"uint8       active_fault_6\n"
"uint8       active_fault_7\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.active_fault_0);
      stream.next(m.active_fault_1);
      stream.next(m.active_fault_2);
      stream.next(m.active_fault_3);
      stream.next(m.active_fault_4);
      stream.next(m.active_fault_5);
      stream.next(m.active_fault_6);
      stream.next(m.active_fault_7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus7_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.canmsg);
    s << indent << "active_fault_0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_0);
    s << indent << "active_fault_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_1);
    s << indent << "active_fault_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_2);
    s << indent << "active_fault_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_3);
    s << indent << "active_fault_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_4);
    s << indent << "active_fault_5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_5);
    s << indent << "active_fault_6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_6);
    s << indent << "active_fault_7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active_fault_7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H
