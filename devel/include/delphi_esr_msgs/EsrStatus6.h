// Generated by gencpp from file delphi_esr_msgs/EsrStatus6.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus6_
{
  typedef EsrStatus6_<ContainerAllocator> Type;

  EsrStatus6_()
    : header()
    , canmsg()
    , supply_1p8v_a2d(0)
    , supply_n5v_a2d(0)
    , wave_diff_a2d(0)
    , sw_version_dsp_3rd_byte(0)
    , vertical_align_updated(false)
    , system_power_mode(0)
    , found_target(false)
    , recommend_unconverge(false)
    , factory_align_status_1(0)
    , factory_align_status_2(0)
    , factory_misalignment(0.0)
    , serv_align_updates_done(0)
    , vertical_misalignment(0.0)  {
    }
  EsrStatus6_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , supply_1p8v_a2d(0)
    , supply_n5v_a2d(0)
    , wave_diff_a2d(0)
    , sw_version_dsp_3rd_byte(0)
    , vertical_align_updated(false)
    , system_power_mode(0)
    , found_target(false)
    , recommend_unconverge(false)
    , factory_align_status_1(0)
    , factory_align_status_2(0)
    , factory_misalignment(0.0)
    , serv_align_updates_done(0)
    , vertical_misalignment(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _supply_1p8v_a2d_type;
  _supply_1p8v_a2d_type supply_1p8v_a2d;

   typedef uint8_t _supply_n5v_a2d_type;
  _supply_n5v_a2d_type supply_n5v_a2d;

   typedef uint8_t _wave_diff_a2d_type;
  _wave_diff_a2d_type wave_diff_a2d;

   typedef uint8_t _sw_version_dsp_3rd_byte_type;
  _sw_version_dsp_3rd_byte_type sw_version_dsp_3rd_byte;

   typedef uint8_t _vertical_align_updated_type;
  _vertical_align_updated_type vertical_align_updated;

   typedef uint8_t _system_power_mode_type;
  _system_power_mode_type system_power_mode;

   typedef uint8_t _found_target_type;
  _found_target_type found_target;

   typedef uint8_t _recommend_unconverge_type;
  _recommend_unconverge_type recommend_unconverge;

   typedef uint8_t _factory_align_status_1_type;
  _factory_align_status_1_type factory_align_status_1;

   typedef uint8_t _factory_align_status_2_type;
  _factory_align_status_2_type factory_align_status_2;

   typedef float _factory_misalignment_type;
  _factory_misalignment_type factory_misalignment;

   typedef uint8_t _serv_align_updates_done_type;
  _serv_align_updates_done_type serv_align_updates_done;

   typedef float _vertical_misalignment_type;
  _vertical_misalignment_type vertical_misalignment;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus6_

typedef ::delphi_esr_msgs::EsrStatus6_<std::allocator<void> > EsrStatus6;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6 > EsrStatus6Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6 const> EsrStatus6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.supply_1p8v_a2d == rhs.supply_1p8v_a2d &&
    lhs.supply_n5v_a2d == rhs.supply_n5v_a2d &&
    lhs.wave_diff_a2d == rhs.wave_diff_a2d &&
    lhs.sw_version_dsp_3rd_byte == rhs.sw_version_dsp_3rd_byte &&
    lhs.vertical_align_updated == rhs.vertical_align_updated &&
    lhs.system_power_mode == rhs.system_power_mode &&
    lhs.found_target == rhs.found_target &&
    lhs.recommend_unconverge == rhs.recommend_unconverge &&
    lhs.factory_align_status_1 == rhs.factory_align_status_1 &&
    lhs.factory_align_status_2 == rhs.factory_align_status_2 &&
    lhs.factory_misalignment == rhs.factory_misalignment &&
    lhs.serv_align_updates_done == rhs.serv_align_updates_done &&
    lhs.vertical_misalignment == rhs.vertical_misalignment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d37d9b3519a6461cdf385184e58e8259";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd37d9b3519a6461cULL;
  static const uint64_t static_value2 = 0xdf385184e58e8259ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus6";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Status6\n"
"string      canmsg\n"
"\n"
"uint8       supply_1p8v_a2d\n"
"uint8       supply_n5v_a2d\n"
"uint8       wave_diff_a2d\n"
"uint8       sw_version_dsp_3rd_byte\n"
"bool        vertical_align_updated\n"
"uint8       system_power_mode\n"
"bool        found_target\n"
"bool        recommend_unconverge\n"
"uint8       factory_align_status_1\n"
"uint8       factory_align_status_2\n"
"float32     factory_misalignment\n"
"uint8       serv_align_updates_done\n"
"float32     vertical_misalignment\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.supply_1p8v_a2d);
      stream.next(m.supply_n5v_a2d);
      stream.next(m.wave_diff_a2d);
      stream.next(m.sw_version_dsp_3rd_byte);
      stream.next(m.vertical_align_updated);
      stream.next(m.system_power_mode);
      stream.next(m.found_target);
      stream.next(m.recommend_unconverge);
      stream.next(m.factory_align_status_1);
      stream.next(m.factory_align_status_2);
      stream.next(m.factory_misalignment);
      stream.next(m.serv_align_updates_done);
      stream.next(m.vertical_misalignment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.canmsg);
    s << indent << "supply_1p8v_a2d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply_1p8v_a2d);
    s << indent << "supply_n5v_a2d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply_n5v_a2d);
    s << indent << "wave_diff_a2d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wave_diff_a2d);
    s << indent << "sw_version_dsp_3rd_byte: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_version_dsp_3rd_byte);
    s << indent << "vertical_align_updated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_align_updated);
    s << indent << "system_power_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_power_mode);
    s << indent << "found_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found_target);
    s << indent << "recommend_unconverge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recommend_unconverge);
    s << indent << "factory_align_status_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factory_align_status_1);
    s << indent << "factory_align_status_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factory_align_status_2);
    s << indent << "factory_misalignment: ";
    Printer<float>::stream(s, indent + "  ", v.factory_misalignment);
    s << indent << "serv_align_updates_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serv_align_updates_done);
    s << indent << "vertical_misalignment: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_misalignment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H
