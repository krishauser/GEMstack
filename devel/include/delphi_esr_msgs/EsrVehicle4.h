// Generated by gencpp from file delphi_esr_msgs/EsrVehicle4.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE4_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE4_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrVehicle4_
{
  typedef EsrVehicle4_<ContainerAllocator> Type;

  EsrVehicle4_()
    : header()
    , fac_align_cmd_1(false)
    , fac_align_cmd_2(false)
    , fac_align_max_nt(0)
    , fac_align_samp_req(0)
    , fac_tgt_mtg_offset(0)
    , fac_tgt_mtg_space_hor(0)
    , fac_tgt_mtg_space_ver(0)
    , fac_tgt_range_1(0.0)
    , fac_tgt_range_r2m(0.0)
    , fac_tgt_range_m2t(0.0)  {
    }
  EsrVehicle4_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fac_align_cmd_1(false)
    , fac_align_cmd_2(false)
    , fac_align_max_nt(0)
    , fac_align_samp_req(0)
    , fac_tgt_mtg_offset(0)
    , fac_tgt_mtg_space_hor(0)
    , fac_tgt_mtg_space_ver(0)
    , fac_tgt_range_1(0.0)
    , fac_tgt_range_r2m(0.0)
    , fac_tgt_range_m2t(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _fac_align_cmd_1_type;
  _fac_align_cmd_1_type fac_align_cmd_1;

   typedef uint8_t _fac_align_cmd_2_type;
  _fac_align_cmd_2_type fac_align_cmd_2;

   typedef uint8_t _fac_align_max_nt_type;
  _fac_align_max_nt_type fac_align_max_nt;

   typedef uint8_t _fac_align_samp_req_type;
  _fac_align_samp_req_type fac_align_samp_req;

   typedef int8_t _fac_tgt_mtg_offset_type;
  _fac_tgt_mtg_offset_type fac_tgt_mtg_offset;

   typedef int8_t _fac_tgt_mtg_space_hor_type;
  _fac_tgt_mtg_space_hor_type fac_tgt_mtg_space_hor;

   typedef int8_t _fac_tgt_mtg_space_ver_type;
  _fac_tgt_mtg_space_ver_type fac_tgt_mtg_space_ver;

   typedef float _fac_tgt_range_1_type;
  _fac_tgt_range_1_type fac_tgt_range_1;

   typedef float _fac_tgt_range_r2m_type;
  _fac_tgt_range_r2m_type fac_tgt_range_r2m;

   typedef float _fac_tgt_range_m2t_type;
  _fac_tgt_range_m2t_type fac_tgt_range_m2t;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> const> ConstPtr;

}; // struct EsrVehicle4_

typedef ::delphi_esr_msgs::EsrVehicle4_<std::allocator<void> > EsrVehicle4;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle4 > EsrVehicle4Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle4 const> EsrVehicle4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fac_align_cmd_1 == rhs.fac_align_cmd_1 &&
    lhs.fac_align_cmd_2 == rhs.fac_align_cmd_2 &&
    lhs.fac_align_max_nt == rhs.fac_align_max_nt &&
    lhs.fac_align_samp_req == rhs.fac_align_samp_req &&
    lhs.fac_tgt_mtg_offset == rhs.fac_tgt_mtg_offset &&
    lhs.fac_tgt_mtg_space_hor == rhs.fac_tgt_mtg_space_hor &&
    lhs.fac_tgt_mtg_space_ver == rhs.fac_tgt_mtg_space_ver &&
    lhs.fac_tgt_range_1 == rhs.fac_tgt_range_1 &&
    lhs.fac_tgt_range_r2m == rhs.fac_tgt_range_r2m &&
    lhs.fac_tgt_range_m2t == rhs.fac_tgt_range_m2t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0805b9094a6d63c8c5d196257252ccdb";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0805b9094a6d63c8ULL;
  static const uint64_t static_value2 = 0xc5d196257252ccdbULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrVehicle4";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Vehicle4\n"
"bool        fac_align_cmd_1\n"
"bool        fac_align_cmd_2\n"
"uint8       fac_align_max_nt\n"
"uint8       fac_align_samp_req\n"
"int8        fac_tgt_mtg_offset\n"
"int8        fac_tgt_mtg_space_hor\n"
"int8        fac_tgt_mtg_space_ver\n"
"float32     fac_tgt_range_1\n"
"float32     fac_tgt_range_r2m\n"
"float32     fac_tgt_range_m2t\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fac_align_cmd_1);
      stream.next(m.fac_align_cmd_2);
      stream.next(m.fac_align_max_nt);
      stream.next(m.fac_align_samp_req);
      stream.next(m.fac_tgt_mtg_offset);
      stream.next(m.fac_tgt_mtg_space_hor);
      stream.next(m.fac_tgt_mtg_space_ver);
      stream.next(m.fac_tgt_range_1);
      stream.next(m.fac_tgt_range_r2m);
      stream.next(m.fac_tgt_range_m2t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrVehicle4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrVehicle4_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fac_align_cmd_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fac_align_cmd_1);
    s << indent << "fac_align_cmd_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fac_align_cmd_2);
    s << indent << "fac_align_max_nt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fac_align_max_nt);
    s << indent << "fac_align_samp_req: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fac_align_samp_req);
    s << indent << "fac_tgt_mtg_offset: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fac_tgt_mtg_offset);
    s << indent << "fac_tgt_mtg_space_hor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fac_tgt_mtg_space_hor);
    s << indent << "fac_tgt_mtg_space_ver: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fac_tgt_mtg_space_ver);
    s << indent << "fac_tgt_range_1: ";
    Printer<float>::stream(s, indent + "  ", v.fac_tgt_range_1);
    s << indent << "fac_tgt_range_r2m: ";
    Printer<float>::stream(s, indent + "  ", v.fac_tgt_range_r2m);
    s << indent << "fac_tgt_range_m2t: ";
    Printer<float>::stream(s, indent + "  ", v.fac_tgt_range_m2t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE4_H
