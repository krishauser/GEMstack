// Generated by gencpp from file delphi_esr_msgs/EsrTrackMotionPowerTrack.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRTRACKMOTIONPOWERTRACK_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRTRACKMOTIONPOWERTRACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrTrackMotionPowerTrack_
{
  typedef EsrTrackMotionPowerTrack_<ContainerAllocator> Type;

  EsrTrackMotionPowerTrack_()
    : id(0)
    , movable_fast(false)
    , movable_slow(false)
    , moving(false)
    , power(0)  {
    }
  EsrTrackMotionPowerTrack_(const ContainerAllocator& _alloc)
    : id(0)
    , movable_fast(false)
    , movable_slow(false)
    , moving(false)
    , power(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _movable_fast_type;
  _movable_fast_type movable_fast;

   typedef uint8_t _movable_slow_type;
  _movable_slow_type movable_slow;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef int8_t _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> const> ConstPtr;

}; // struct EsrTrackMotionPowerTrack_

typedef ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<std::allocator<void> > EsrTrackMotionPowerTrack;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrackMotionPowerTrack > EsrTrackMotionPowerTrackPtr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrTrackMotionPowerTrack const> EsrTrackMotionPowerTrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.movable_fast == rhs.movable_fast &&
    lhs.movable_slow == rhs.movable_slow &&
    lhs.moving == rhs.moving &&
    lhs.power == rhs.power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cb7ee3e17f03f833bf47e59a4267646";
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cb7ee3e17f03f83ULL;
  static const uint64_t static_value2 = 0x3bf47e59a4267646ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrTrackMotionPowerTrack";
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ESR TrackMotionPower, track-specific information\n"
"uint8  id\n"
"bool   movable_fast\n"
"bool   movable_slow\n"
"bool   moving\n"
"int8   power\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.movable_fast);
      stream.next(m.movable_slow);
      stream.next(m.moving);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrTrackMotionPowerTrack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrTrackMotionPowerTrack_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "movable_fast: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movable_fast);
    s << indent << "movable_slow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movable_slow);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "power: ";
    Printer<int8_t>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRTRACKMOTIONPOWERTRACK_H
