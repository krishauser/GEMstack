// Generated by gencpp from file delphi_esr_msgs/EsrVehicle3.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE3_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE3_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrVehicle3_
{
  typedef EsrVehicle3_<ContainerAllocator> Type;

  EsrVehicle3_()
    : header()
    , long_accel_validity(false)
    , lat_accel_validity(false)
    , lat_accel(0.0)
    , long_accel(0.0)
    , radar_fov_lr(0)
    , radar_fov_mr(0)
    , auto_align_disable(false)
    , radar_height(0)
    , serv_align_type(false)
    , serv_align_enable(false)
    , aalign_avg_ctr_total(0)
    , auto_align_converged(false)
    , wheel_slip(0)
    , serv_align_updates_need(0)
    , angle_mounting_offset(0)  {
    }
  EsrVehicle3_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , long_accel_validity(false)
    , lat_accel_validity(false)
    , lat_accel(0.0)
    , long_accel(0.0)
    , radar_fov_lr(0)
    , radar_fov_mr(0)
    , auto_align_disable(false)
    , radar_height(0)
    , serv_align_type(false)
    , serv_align_enable(false)
    , aalign_avg_ctr_total(0)
    , auto_align_converged(false)
    , wheel_slip(0)
    , serv_align_updates_need(0)
    , angle_mounting_offset(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _long_accel_validity_type;
  _long_accel_validity_type long_accel_validity;

   typedef uint8_t _lat_accel_validity_type;
  _lat_accel_validity_type lat_accel_validity;

   typedef float _lat_accel_type;
  _lat_accel_type lat_accel;

   typedef float _long_accel_type;
  _long_accel_type long_accel;

   typedef uint8_t _radar_fov_lr_type;
  _radar_fov_lr_type radar_fov_lr;

   typedef uint8_t _radar_fov_mr_type;
  _radar_fov_mr_type radar_fov_mr;

   typedef uint8_t _auto_align_disable_type;
  _auto_align_disable_type auto_align_disable;

   typedef uint8_t _radar_height_type;
  _radar_height_type radar_height;

   typedef uint8_t _serv_align_type_type;
  _serv_align_type_type serv_align_type;

   typedef uint8_t _serv_align_enable_type;
  _serv_align_enable_type serv_align_enable;

   typedef uint16_t _aalign_avg_ctr_total_type;
  _aalign_avg_ctr_total_type aalign_avg_ctr_total;

   typedef uint8_t _auto_align_converged_type;
  _auto_align_converged_type auto_align_converged;

   typedef uint8_t _wheel_slip_type;
  _wheel_slip_type wheel_slip;

   typedef uint8_t _serv_align_updates_need_type;
  _serv_align_updates_need_type serv_align_updates_need;

   typedef int8_t _angle_mounting_offset_type;
  _angle_mounting_offset_type angle_mounting_offset;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> const> ConstPtr;

}; // struct EsrVehicle3_

typedef ::delphi_esr_msgs::EsrVehicle3_<std::allocator<void> > EsrVehicle3;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle3 > EsrVehicle3Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle3 const> EsrVehicle3ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.long_accel_validity == rhs.long_accel_validity &&
    lhs.lat_accel_validity == rhs.lat_accel_validity &&
    lhs.lat_accel == rhs.lat_accel &&
    lhs.long_accel == rhs.long_accel &&
    lhs.radar_fov_lr == rhs.radar_fov_lr &&
    lhs.radar_fov_mr == rhs.radar_fov_mr &&
    lhs.auto_align_disable == rhs.auto_align_disable &&
    lhs.radar_height == rhs.radar_height &&
    lhs.serv_align_type == rhs.serv_align_type &&
    lhs.serv_align_enable == rhs.serv_align_enable &&
    lhs.aalign_avg_ctr_total == rhs.aalign_avg_ctr_total &&
    lhs.auto_align_converged == rhs.auto_align_converged &&
    lhs.wheel_slip == rhs.wheel_slip &&
    lhs.serv_align_updates_need == rhs.serv_align_updates_need &&
    lhs.angle_mounting_offset == rhs.angle_mounting_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "584771b70916ae655b7479bcb4bbfe22";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x584771b70916ae65ULL;
  static const uint64_t static_value2 = 0x5b7479bcb4bbfe22ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrVehicle3";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Vehicle3\n"
"bool        long_accel_validity\n"
"bool        lat_accel_validity\n"
"float32     lat_accel\n"
"float32     long_accel\n"
"uint8       radar_fov_lr\n"
"uint8       radar_fov_mr\n"
"bool        auto_align_disable\n"
"uint8       radar_height\n"
"bool        serv_align_type\n"
"bool        serv_align_enable\n"
"uint16      aalign_avg_ctr_total\n"
"bool        auto_align_converged\n"
"uint8       wheel_slip\n"
"uint8       serv_align_updates_need\n"
"int8        angle_mounting_offset\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.long_accel_validity);
      stream.next(m.lat_accel_validity);
      stream.next(m.lat_accel);
      stream.next(m.long_accel);
      stream.next(m.radar_fov_lr);
      stream.next(m.radar_fov_mr);
      stream.next(m.auto_align_disable);
      stream.next(m.radar_height);
      stream.next(m.serv_align_type);
      stream.next(m.serv_align_enable);
      stream.next(m.aalign_avg_ctr_total);
      stream.next(m.auto_align_converged);
      stream.next(m.wheel_slip);
      stream.next(m.serv_align_updates_need);
      stream.next(m.angle_mounting_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrVehicle3_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrVehicle3_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "long_accel_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.long_accel_validity);
    s << indent << "lat_accel_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lat_accel_validity);
    s << indent << "lat_accel: ";
    Printer<float>::stream(s, indent + "  ", v.lat_accel);
    s << indent << "long_accel: ";
    Printer<float>::stream(s, indent + "  ", v.long_accel);
    s << indent << "radar_fov_lr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_fov_lr);
    s << indent << "radar_fov_mr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_fov_mr);
    s << indent << "auto_align_disable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_align_disable);
    s << indent << "radar_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_height);
    s << indent << "serv_align_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serv_align_type);
    s << indent << "serv_align_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serv_align_enable);
    s << indent << "aalign_avg_ctr_total: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.aalign_avg_ctr_total);
    s << indent << "auto_align_converged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_align_converged);
    s << indent << "wheel_slip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_slip);
    s << indent << "serv_align_updates_need: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serv_align_updates_need);
    s << indent << "angle_mounting_offset: ";
    Printer<int8_t>::stream(s, indent + "  ", v.angle_mounting_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE3_H
