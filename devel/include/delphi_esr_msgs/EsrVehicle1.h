// Generated by gencpp from file delphi_esr_msgs/EsrVehicle1.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE1_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrVehicle1_
{
  typedef EsrVehicle1_<ContainerAllocator> Type;

  EsrVehicle1_()
    : header()
    , vehicle_speed(0.0)
    , vehicle_speed_direction(false)
    , yaw_rate(0.0)
    , yaw_rate_validity(false)
    , steering_angle_rate_sign(false)
    , radius_curvature(0)
    , steering_angle_validity(false)
    , steering_angle_sign(false)
    , steering_angle(0)
    , steering_angle_rate(0)  {
    }
  EsrVehicle1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_speed(0.0)
    , vehicle_speed_direction(false)
    , yaw_rate(0.0)
    , yaw_rate_validity(false)
    , steering_angle_rate_sign(false)
    , radius_curvature(0)
    , steering_angle_validity(false)
    , steering_angle_sign(false)
    , steering_angle(0)
    , steering_angle_rate(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef uint8_t _vehicle_speed_direction_type;
  _vehicle_speed_direction_type vehicle_speed_direction;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef uint8_t _yaw_rate_validity_type;
  _yaw_rate_validity_type yaw_rate_validity;

   typedef uint8_t _steering_angle_rate_sign_type;
  _steering_angle_rate_sign_type steering_angle_rate_sign;

   typedef int16_t _radius_curvature_type;
  _radius_curvature_type radius_curvature;

   typedef uint8_t _steering_angle_validity_type;
  _steering_angle_validity_type steering_angle_validity;

   typedef uint8_t _steering_angle_sign_type;
  _steering_angle_sign_type steering_angle_sign;

   typedef uint16_t _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef uint16_t _steering_angle_rate_type;
  _steering_angle_rate_type steering_angle_rate;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> const> ConstPtr;

}; // struct EsrVehicle1_

typedef ::delphi_esr_msgs::EsrVehicle1_<std::allocator<void> > EsrVehicle1;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle1 > EsrVehicle1Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrVehicle1 const> EsrVehicle1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicle_speed == rhs.vehicle_speed &&
    lhs.vehicle_speed_direction == rhs.vehicle_speed_direction &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.yaw_rate_validity == rhs.yaw_rate_validity &&
    lhs.steering_angle_rate_sign == rhs.steering_angle_rate_sign &&
    lhs.radius_curvature == rhs.radius_curvature &&
    lhs.steering_angle_validity == rhs.steering_angle_validity &&
    lhs.steering_angle_sign == rhs.steering_angle_sign &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.steering_angle_rate == rhs.steering_angle_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72f3525a55255ecd3a2ea2c75fb27820";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72f3525a55255ecdULL;
  static const uint64_t static_value2 = 0x3a2ea2c75fb27820ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrVehicle1";
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# ESR Vehicle1\n"
"float32     vehicle_speed\n"
"bool        vehicle_speed_direction\n"
"float32     yaw_rate\n"
"bool        yaw_rate_validity\n"
"bool        steering_angle_rate_sign\n"
"int16       radius_curvature\n"
"bool        steering_angle_validity\n"
"bool        steering_angle_sign\n"
"uint16      steering_angle\n"
"uint16      steering_angle_rate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_speed);
      stream.next(m.vehicle_speed_direction);
      stream.next(m.yaw_rate);
      stream.next(m.yaw_rate_validity);
      stream.next(m.steering_angle_rate_sign);
      stream.next(m.radius_curvature);
      stream.next(m.steering_angle_validity);
      stream.next(m.steering_angle_sign);
      stream.next(m.steering_angle);
      stream.next(m.steering_angle_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrVehicle1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrVehicle1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "vehicle_speed_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_speed_direction);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "yaw_rate_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_rate_validity);
    s << indent << "steering_angle_rate_sign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_angle_rate_sign);
    s << indent << "radius_curvature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radius_curvature);
    s << indent << "steering_angle_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_angle_validity);
    s << indent << "steering_angle_sign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_angle_sign);
    s << indent << "steering_angle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "steering_angle_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.steering_angle_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRVEHICLE1_H
