// Generated by gencpp from file delphi_srr_msgs/SrrFeatureAlert.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrFeatureAlert_
{
  typedef SrrFeatureAlert_<ContainerAllocator> Type;

  SrrFeatureAlert_()
    : header()
    , lcma_blis_ignored_track_id(0)
    , lcma_blis_track_id(0)
    , lcma_cvw_ttc(0.0)
    , cta_ttc_alert(false)
    , cta_selected_track_ttc(0.0)
    , cta_selected_track(0)
    , cta_alert(0)
    , cta_active(false)
    , lcma_cvw_cipv(0)
    , lcma_cvw_alert_state(0)
    , lcma_blis_alert_state(0)
    , lcma_active(false)  {
    }
  SrrFeatureAlert_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lcma_blis_ignored_track_id(0)
    , lcma_blis_track_id(0)
    , lcma_cvw_ttc(0.0)
    , cta_ttc_alert(false)
    , cta_selected_track_ttc(0.0)
    , cta_selected_track(0)
    , cta_alert(0)
    , cta_active(false)
    , lcma_cvw_cipv(0)
    , lcma_cvw_alert_state(0)
    , lcma_blis_alert_state(0)
    , lcma_active(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lcma_blis_ignored_track_id_type;
  _lcma_blis_ignored_track_id_type lcma_blis_ignored_track_id;

   typedef uint8_t _lcma_blis_track_id_type;
  _lcma_blis_track_id_type lcma_blis_track_id;

   typedef float _lcma_cvw_ttc_type;
  _lcma_cvw_ttc_type lcma_cvw_ttc;

   typedef uint8_t _cta_ttc_alert_type;
  _cta_ttc_alert_type cta_ttc_alert;

   typedef float _cta_selected_track_ttc_type;
  _cta_selected_track_ttc_type cta_selected_track_ttc;

   typedef uint16_t _cta_selected_track_type;
  _cta_selected_track_type cta_selected_track;

   typedef uint8_t _cta_alert_type;
  _cta_alert_type cta_alert;

   typedef uint8_t _cta_active_type;
  _cta_active_type cta_active;

   typedef uint8_t _lcma_cvw_cipv_type;
  _lcma_cvw_cipv_type lcma_cvw_cipv;

   typedef uint8_t _lcma_cvw_alert_state_type;
  _lcma_cvw_alert_state_type lcma_cvw_alert_state;

   typedef uint8_t _lcma_blis_alert_state_type;
  _lcma_blis_alert_state_type lcma_blis_alert_state;

   typedef uint8_t _lcma_active_type;
  _lcma_active_type lcma_active;





  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const> ConstPtr;

}; // struct SrrFeatureAlert_

typedef ::delphi_srr_msgs::SrrFeatureAlert_<std::allocator<void> > SrrFeatureAlert;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert > SrrFeatureAlertPtr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert const> SrrFeatureAlertConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lcma_blis_ignored_track_id == rhs.lcma_blis_ignored_track_id &&
    lhs.lcma_blis_track_id == rhs.lcma_blis_track_id &&
    lhs.lcma_cvw_ttc == rhs.lcma_cvw_ttc &&
    lhs.cta_ttc_alert == rhs.cta_ttc_alert &&
    lhs.cta_selected_track_ttc == rhs.cta_selected_track_ttc &&
    lhs.cta_selected_track == rhs.cta_selected_track &&
    lhs.cta_alert == rhs.cta_alert &&
    lhs.cta_active == rhs.cta_active &&
    lhs.lcma_cvw_cipv == rhs.lcma_cvw_cipv &&
    lhs.lcma_cvw_alert_state == rhs.lcma_cvw_alert_state &&
    lhs.lcma_blis_alert_state == rhs.lcma_blis_alert_state &&
    lhs.lcma_active == rhs.lcma_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "721bc54767b8d837fd2e98fc870215ce";
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x721bc54767b8d837ULL;
  static const uint64_t static_value2 = 0xfd2e98fc870215ceULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrFeatureAlert";
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_feature_alert\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8     lcma_blis_ignored_track_id\n"
"uint8     lcma_blis_track_id\n"
"float32   lcma_cvw_ttc                             # seconds\n"
"bool      cta_ttc_alert\n"
"float32   cta_selected_track_ttc                   # seconds\n"
"uint16    cta_selected_track\n"
"uint8     cta_alert                                # binary\n"
"bool      cta_active                               # binary\n"
"uint8     lcma_cvw_cipv\n"
"uint8     lcma_cvw_alert_state\n"
"uint8     lcma_blis_alert_state\n"
"bool      lcma_active\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lcma_blis_ignored_track_id);
      stream.next(m.lcma_blis_track_id);
      stream.next(m.lcma_cvw_ttc);
      stream.next(m.cta_ttc_alert);
      stream.next(m.cta_selected_track_ttc);
      stream.next(m.cta_selected_track);
      stream.next(m.cta_alert);
      stream.next(m.cta_active);
      stream.next(m.lcma_cvw_cipv);
      stream.next(m.lcma_cvw_alert_state);
      stream.next(m.lcma_blis_alert_state);
      stream.next(m.lcma_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrFeatureAlert_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lcma_blis_ignored_track_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_blis_ignored_track_id);
    s << indent << "lcma_blis_track_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_blis_track_id);
    s << indent << "lcma_cvw_ttc: ";
    Printer<float>::stream(s, indent + "  ", v.lcma_cvw_ttc);
    s << indent << "cta_ttc_alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cta_ttc_alert);
    s << indent << "cta_selected_track_ttc: ";
    Printer<float>::stream(s, indent + "  ", v.cta_selected_track_ttc);
    s << indent << "cta_selected_track: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cta_selected_track);
    s << indent << "cta_alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cta_alert);
    s << indent << "cta_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cta_active);
    s << indent << "lcma_cvw_cipv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_cvw_cipv);
    s << indent << "lcma_cvw_alert_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_cvw_alert_state);
    s << indent << "lcma_blis_alert_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_blis_alert_state);
    s << indent << "lcma_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lcma_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H
