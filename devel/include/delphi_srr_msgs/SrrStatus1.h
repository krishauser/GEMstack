// Generated by gencpp from file delphi_srr_msgs/SrrStatus1.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS1_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus1_
{
  typedef SrrStatus1_<ContainerAllocator> Type;

  SrrStatus1_()
    : header()
    , can_tx_look_type(false)
    , can_tx_dsp_timestamp(0)
    , can_tx_yaw_rate_calc(0.0)
    , can_tx_vehicle_speed_calc(0.0)
    , can_tx_scan_index(0)
    , can_tx_curvature(0.0)  {
    }
  SrrStatus1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_tx_look_type(false)
    , can_tx_dsp_timestamp(0)
    , can_tx_yaw_rate_calc(0.0)
    , can_tx_vehicle_speed_calc(0.0)
    , can_tx_scan_index(0)
    , can_tx_curvature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_tx_look_type_type;
  _can_tx_look_type_type can_tx_look_type;

   typedef uint32_t _can_tx_dsp_timestamp_type;
  _can_tx_dsp_timestamp_type can_tx_dsp_timestamp;

   typedef float _can_tx_yaw_rate_calc_type;
  _can_tx_yaw_rate_calc_type can_tx_yaw_rate_calc;

   typedef float _can_tx_vehicle_speed_calc_type;
  _can_tx_vehicle_speed_calc_type can_tx_vehicle_speed_calc;

   typedef uint16_t _can_tx_scan_index_type;
  _can_tx_scan_index_type can_tx_scan_index;

   typedef float _can_tx_curvature_type;
  _can_tx_curvature_type can_tx_curvature;





  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus1_

typedef ::delphi_srr_msgs::SrrStatus1_<std::allocator<void> > SrrStatus1;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus1 > SrrStatus1Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus1 const> SrrStatus1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_tx_look_type == rhs.can_tx_look_type &&
    lhs.can_tx_dsp_timestamp == rhs.can_tx_dsp_timestamp &&
    lhs.can_tx_yaw_rate_calc == rhs.can_tx_yaw_rate_calc &&
    lhs.can_tx_vehicle_speed_calc == rhs.can_tx_vehicle_speed_calc &&
    lhs.can_tx_scan_index == rhs.can_tx_scan_index &&
    lhs.can_tx_curvature == rhs.can_tx_curvature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "585df8ad7a5b009cc9f6c14365cc686e";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x585df8ad7a5b009cULL;
  static const uint64_t static_value2 = 0xc9f6c14365cc686eULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus1";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status1\n"
"\n"
"std_msgs/Header header\n"
"\n"
"bool      can_tx_look_type\n"
"uint32    can_tx_dsp_timestamp                     # ms\n"
"float32   can_tx_yaw_rate_calc                     # deg/s\n"
"float32   can_tx_vehicle_speed_calc                # m/s\n"
"uint16    can_tx_scan_index\n"
"float32   can_tx_curvature                         # 1/m\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_tx_look_type);
      stream.next(m.can_tx_dsp_timestamp);
      stream.next(m.can_tx_yaw_rate_calc);
      stream.next(m.can_tx_vehicle_speed_calc);
      stream.next(m.can_tx_scan_index);
      stream.next(m.can_tx_curvature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_tx_look_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_look_type);
    s << indent << "can_tx_dsp_timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.can_tx_dsp_timestamp);
    s << indent << "can_tx_yaw_rate_calc: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_yaw_rate_calc);
    s << indent << "can_tx_vehicle_speed_calc: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_vehicle_speed_calc);
    s << indent << "can_tx_scan_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.can_tx_scan_index);
    s << indent << "can_tx_curvature: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_curvature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS1_H
