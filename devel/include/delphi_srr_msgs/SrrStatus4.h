// Generated by gencpp from file delphi_srr_msgs/SrrStatus4.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS4_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS4_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus4_
{
  typedef SrrStatus4_<ContainerAllocator> Type;

  SrrStatus4_()
    : header()
    , can_tx_sw_version_host(0)
    , can_tx_path_id_blis_ignore(0)
    , can_tx_path_id_blis(0)
    , can_tx_angle_misalignment(0.0)
    , can_tx_auto_align_angle(0.0)  {
    }
  SrrStatus4_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_tx_sw_version_host(0)
    , can_tx_path_id_blis_ignore(0)
    , can_tx_path_id_blis(0)
    , can_tx_angle_misalignment(0.0)
    , can_tx_auto_align_angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _can_tx_sw_version_host_type;
  _can_tx_sw_version_host_type can_tx_sw_version_host;

   typedef uint8_t _can_tx_path_id_blis_ignore_type;
  _can_tx_path_id_blis_ignore_type can_tx_path_id_blis_ignore;

   typedef uint8_t _can_tx_path_id_blis_type;
  _can_tx_path_id_blis_type can_tx_path_id_blis;

   typedef float _can_tx_angle_misalignment_type;
  _can_tx_angle_misalignment_type can_tx_angle_misalignment;

   typedef float _can_tx_auto_align_angle_type;
  _can_tx_auto_align_angle_type can_tx_auto_align_angle;





  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus4_

typedef ::delphi_srr_msgs::SrrStatus4_<std::allocator<void> > SrrStatus4;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus4 > SrrStatus4Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus4 const> SrrStatus4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_tx_sw_version_host == rhs.can_tx_sw_version_host &&
    lhs.can_tx_path_id_blis_ignore == rhs.can_tx_path_id_blis_ignore &&
    lhs.can_tx_path_id_blis == rhs.can_tx_path_id_blis &&
    lhs.can_tx_angle_misalignment == rhs.can_tx_angle_misalignment &&
    lhs.can_tx_auto_align_angle == rhs.can_tx_auto_align_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator1> & lhs, const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f5e5c4790453e1f3bcd5507dd8162bd";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f5e5c4790453e1fULL;
  static const uint64_t static_value2 = 0x3bcd5507dd8162bdULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus4";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status4\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint16    can_tx_sw_version_host\n"
"uint8     can_tx_path_id_blis_ignore\n"
"uint8     can_tx_path_id_blis\n"
"float32   can_tx_angle_misalignment\n"
"float32   can_tx_auto_align_angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_tx_sw_version_host);
      stream.next(m.can_tx_path_id_blis_ignore);
      stream.next(m.can_tx_path_id_blis);
      stream.next(m.can_tx_angle_misalignment);
      stream.next(m.can_tx_auto_align_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus4_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_tx_sw_version_host: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.can_tx_sw_version_host);
    s << indent << "can_tx_path_id_blis_ignore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_path_id_blis_ignore);
    s << indent << "can_tx_path_id_blis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_tx_path_id_blis);
    s << indent << "can_tx_angle_misalignment: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_angle_misalignment);
    s << indent << "can_tx_auto_align_angle: ";
    Printer<float>::stream(s, indent + "  ", v.can_tx_auto_align_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS4_H
