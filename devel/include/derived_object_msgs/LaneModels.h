// Generated by gencpp from file derived_object_msgs/LaneModels.msg
// DO NOT EDIT!


#ifndef DERIVED_OBJECT_MSGS_MESSAGE_LANEMODELS_H
#define DERIVED_OBJECT_MSGS_MESSAGE_LANEMODELS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <derived_object_msgs/Lane.h>
#include <derived_object_msgs/Lane.h>
#include <derived_object_msgs/Lane.h>

namespace derived_object_msgs
{
template <class ContainerAllocator>
struct LaneModels_
{
  typedef LaneModels_<ContainerAllocator> Type;

  LaneModels_()
    : header()
    , left_lane()
    , right_lane()
    , additional_lanes()  {
    }
  LaneModels_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_lane(_alloc)
    , right_lane(_alloc)
    , additional_lanes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::derived_object_msgs::Lane_<ContainerAllocator>  _left_lane_type;
  _left_lane_type left_lane;

   typedef  ::derived_object_msgs::Lane_<ContainerAllocator>  _right_lane_type;
  _right_lane_type right_lane;

   typedef std::vector< ::derived_object_msgs::Lane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::derived_object_msgs::Lane_<ContainerAllocator> >> _additional_lanes_type;
  _additional_lanes_type additional_lanes;





  typedef boost::shared_ptr< ::derived_object_msgs::LaneModels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::derived_object_msgs::LaneModels_<ContainerAllocator> const> ConstPtr;

}; // struct LaneModels_

typedef ::derived_object_msgs::LaneModels_<std::allocator<void> > LaneModels;

typedef boost::shared_ptr< ::derived_object_msgs::LaneModels > LaneModelsPtr;
typedef boost::shared_ptr< ::derived_object_msgs::LaneModels const> LaneModelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::derived_object_msgs::LaneModels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::derived_object_msgs::LaneModels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::derived_object_msgs::LaneModels_<ContainerAllocator1> & lhs, const ::derived_object_msgs::LaneModels_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_lane == rhs.left_lane &&
    lhs.right_lane == rhs.right_lane &&
    lhs.additional_lanes == rhs.additional_lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::derived_object_msgs::LaneModels_<ContainerAllocator1> & lhs, const ::derived_object_msgs::LaneModels_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace derived_object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::derived_object_msgs::LaneModels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::derived_object_msgs::LaneModels_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::derived_object_msgs::LaneModels_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c7a9d0cc35a8e5d0d677034bfc4d18b";
  }

  static const char* value(const ::derived_object_msgs::LaneModels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c7a9d0cc35a8e5dULL;
  static const uint64_t static_value2 = 0x0d677034bfc4d18bULL;
};

template<class ContainerAllocator>
struct DataType< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "derived_object_msgs/LaneModels";
  }

  static const char* value(const ::derived_object_msgs::LaneModels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Lane Models Message\n"
"# Contains multiple lanes detected by the sensor\n"
"\n"
"std_msgs/Header header\n"
"\n"
"derived_object_msgs/Lane left_lane\n"
"derived_object_msgs/Lane right_lane\n"
"\n"
"derived_object_msgs/Lane[] additional_lanes\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: derived_object_msgs/Lane\n"
"# Lane Definition Message\n"
"# Contains information on a single lane marker\n"
"\n"
"uint8 quality                 # Visual quality of lane marker\n"
"uint8 LANE_QUALITY_INVALID = 0\n"
"uint8 LANE_QUALITY_UNKNOWN = 1\n"
"uint8 LANE_QUALITY_NOT_AVAILABLE = 2\n"
"uint8 LANE_QUALITY_0 = 3\n"
"uint8 LANE_QUALITY_1 = 4\n"
"uint8 LANE_QUALITY_2 = 5\n"
"uint8 LANE_QUALITY_3 = 6\n"
"uint8 LANE_QUALITY_4 = 7\n"
"uint8 LANE_QUALITY_5 = 8\n"
"uint8 LANE_QUALITY_6 = 9\n"
"uint8 LANE_QUALITY_7 = 10\n"
"uint8 LANE_QUALITY_8 = 11\n"
"uint8 LANE_QUALITY_9 = 12\n"
"uint8 LANE_QUALITY_KIND_COUNT = 13\n"
"\n"
"uint8 marker_kind             # Solid, dashed, ...\n"
"uint8 LANE_MARKER_INVALID = 0\n"
"uint8 LANE_MARKER_UNKNOWN = 1\n"
"uint8 LANE_MARKER_NOT_AVAILABLE = 2\n"
"uint8 LANE_MARKER_NONE = 3\n"
"uint8 LANE_MARKER_SOLID = 4\n"
"uint8 LANE_MARKER_DASHED = 5\n"
"uint8 LANE_MARKER_VIRTUAL = 6\n"
"uint8 LANE_MARKER_DOTS = 7\n"
"uint8 LANE_MARKER_ROAD_EDGE = 8\n"
"uint8 LANE_MARKER_DOUBLE_LINE = 9\n"
"uint8 LANE_MARKER_KIND_COUNT = 10\n"
"\n"
"uint8 curve_model_kind        # Order of equation\n"
"uint8 LANE_CURVE_MODEL_INVALID = 0\n"
"uint8 LANE_CURVE_MODEL_UNKNOWN = 1\n"
"uint8 LANE_CURVE_MODEL_NOT_AVAILABLE = 2\n"
"uint8 LANE_CURVE_MODEL_LINEAR = 3\n"
"uint8 LANE_CURVE_MODEL_PARABOLIC = 4\n"
"uint8 LANE_CURVE_MODEL_3D = 5\n"
"uint8 LANE_CURVE_MODEL_KIND_COUNT = 6\n"
"\n"
"float64 marker_offset         # Lateral distance from sensor to marker (m)\n"
"float64 heading_angle         # Angle of marker relative to sensor (rad)\n"
"float64 curvature             # Curvature of the lane marker at the camera (1/m)\n"
"float64 curvature_derivative  # Amount curvature changes as you move away from the camera (1/m^2)\n"
"float64 marker_width          # Width of the painted marker (not distance between lane markers) (m)\n"
"float64 view_range            # Physical view range of the lane mark (m)\n"
;
  }

  static const char* value(const ::derived_object_msgs::LaneModels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_lane);
      stream.next(m.right_lane);
      stream.next(m.additional_lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneModels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::derived_object_msgs::LaneModels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::derived_object_msgs::LaneModels_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_lane: ";
    s << std::endl;
    Printer< ::derived_object_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "  ", v.left_lane);
    s << indent << "right_lane: ";
    s << std::endl;
    Printer< ::derived_object_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "  ", v.right_lane);
    s << indent << "additional_lanes[]" << std::endl;
    for (size_t i = 0; i < v.additional_lanes.size(); ++i)
    {
      s << indent << "  additional_lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::derived_object_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.additional_lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DERIVED_OBJECT_MSGS_MESSAGE_LANEMODELS_H
