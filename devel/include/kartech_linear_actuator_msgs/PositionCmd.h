// Generated by gencpp from file kartech_linear_actuator_msgs/PositionCmd.msg
// DO NOT EDIT!


#ifndef KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_POSITIONCMD_H
#define KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_POSITIONCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kartech_linear_actuator_msgs
{
template <class ContainerAllocator>
struct PositionCmd_
{
  typedef PositionCmd_<ContainerAllocator> Type;

  PositionCmd_()
    : header()
    , confirm(false)
    , auto_reply(false)
    , position(0.0)
    , clutch_enable(false)
    , motor_enable(false)  {
    }
  PositionCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , confirm(false)
    , auto_reply(false)
    , position(0.0)
    , clutch_enable(false)
    , motor_enable(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _confirm_type;
  _confirm_type confirm;

   typedef uint8_t _auto_reply_type;
  _auto_reply_type auto_reply;

   typedef double _position_type;
  _position_type position;

   typedef uint8_t _clutch_enable_type;
  _clutch_enable_type clutch_enable;

   typedef uint8_t _motor_enable_type;
  _motor_enable_type motor_enable;





  typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PositionCmd_

typedef ::kartech_linear_actuator_msgs::PositionCmd_<std::allocator<void> > PositionCmd;

typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::PositionCmd > PositionCmdPtr;
typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::PositionCmd const> PositionCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator1> & lhs, const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.confirm == rhs.confirm &&
    lhs.auto_reply == rhs.auto_reply &&
    lhs.position == rhs.position &&
    lhs.clutch_enable == rhs.clutch_enable &&
    lhs.motor_enable == rhs.motor_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator1> & lhs, const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kartech_linear_actuator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac9ab77927289195f06ee9b42fabeac2";
  }

  static const char* value(const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac9ab77927289195ULL;
  static const uint64_t static_value2 = 0xf06ee9b42fabeac2ULL;
};

template<class ContainerAllocator>
struct DataType< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kartech_linear_actuator_msgs/PositionCmd";
  }

  static const char* value(const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool confirm\n"
"bool auto_reply\n"
"float64 position    # Position in 0.001\" increments.\n"
"bool clutch_enable  # Disables (false) or enables (true) the built-in clutch after the position has been reached.\n"
"bool motor_enable   # Disables (false) or enables (true) the motor after the position has been reached.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.confirm);
      stream.next(m.auto_reply);
      stream.next(m.position);
      stream.next(m.clutch_enable);
      stream.next(m.motor_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kartech_linear_actuator_msgs::PositionCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "confirm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confirm);
    s << indent << "auto_reply: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_reply);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "clutch_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clutch_enable);
    s << indent << "motor_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_POSITIONCMD_H
