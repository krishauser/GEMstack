// Generated by gencpp from file kartech_linear_actuator_msgs/ReassignCommandIdCmd.msg
// DO NOT EDIT!


#ifndef KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_REASSIGNCOMMANDIDCMD_H
#define KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_REASSIGNCOMMANDIDCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kartech_linear_actuator_msgs
{
template <class ContainerAllocator>
struct ReassignCommandIdCmd_
{
  typedef ReassignCommandIdCmd_<ContainerAllocator> Type;

  ReassignCommandIdCmd_()
    : header()
    , confirm(false)
    , command_id_index(0)
    , user_command_id(0)
    , disable_default_command_id(false)  {
    }
  ReassignCommandIdCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , confirm(false)
    , command_id_index(0)
    , user_command_id(0)
    , disable_default_command_id(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _confirm_type;
  _confirm_type confirm;

   typedef uint8_t _command_id_index_type;
  _command_id_index_type command_id_index;

   typedef uint32_t _user_command_id_type;
  _user_command_id_type user_command_id;

   typedef uint8_t _disable_default_command_id_type;
  _disable_default_command_id_type disable_default_command_id;





  typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ReassignCommandIdCmd_

typedef ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<std::allocator<void> > ReassignCommandIdCmd;

typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd > ReassignCommandIdCmdPtr;
typedef boost::shared_ptr< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd const> ReassignCommandIdCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator1> & lhs, const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.confirm == rhs.confirm &&
    lhs.command_id_index == rhs.command_id_index &&
    lhs.user_command_id == rhs.user_command_id &&
    lhs.disable_default_command_id == rhs.disable_default_command_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator1> & lhs, const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kartech_linear_actuator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41d43df68f42f68725a7567326abaa4d";
  }

  static const char* value(const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41d43df68f42f687ULL;
  static const uint64_t static_value2 = 0x25a7567326abaa4dULL;
};

template<class ContainerAllocator>
struct DataType< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kartech_linear_actuator_msgs/ReassignCommandIdCmd";
  }

  static const char* value(const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool confirm\n"
"uint8 command_id_index            # The index of the user-defined command ID (1-4) to change.\n"
"uint32 user_command_id            # The new user-defined command ID to set. 0xFFFEXX and 0xFF00XX are reserved.\n"
"                                  # Setting this to 0xFFFFFFFF will change the disable_default_command_id flag without affecting any others.\n"
"bool disable_default_command_id   # Disables (true) or enables (false) the default command ID.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.confirm);
      stream.next(m.command_id_index);
      stream.next(m.user_command_id);
      stream.next(m.disable_default_command_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReassignCommandIdCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kartech_linear_actuator_msgs::ReassignCommandIdCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "confirm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confirm);
    s << indent << "command_id_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_id_index);
    s << indent << "user_command_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.user_command_id);
    s << indent << "disable_default_command_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disable_default_command_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KARTECH_LINEAR_ACTUATOR_MSGS_MESSAGE_REASSIGNCOMMANDIDCMD_H
