// Generated by gencpp from file neobotix_usboard_msgs/AnsToCmdConnect.msg
// DO NOT EDIT!


#ifndef NEOBOTIX_USBOARD_MSGS_MESSAGE_ANSTOCMDCONNECT_H
#define NEOBOTIX_USBOARD_MSGS_MESSAGE_ANSTOCMDCONNECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace neobotix_usboard_msgs
{
template <class ContainerAllocator>
struct AnsToCmdConnect_
{
  typedef AnsToCmdConnect_<ContainerAllocator> Type;

  AnsToCmdConnect_()
    : header()
    , command(0)
    , cmd_connect_ans_d7(0)
    , cmd_connect_ans_d6(0)
    , cmd_connect_ans_d5(0)
    , cmd_connect_ans_d4(0)
    , cmd_connect_ans_d3(0)
    , cmd_connect_ans_d2(0)
    , cmd_connect_ans_d1(0)  {
    }
  AnsToCmdConnect_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command(0)
    , cmd_connect_ans_d7(0)
    , cmd_connect_ans_d6(0)
    , cmd_connect_ans_d5(0)
    , cmd_connect_ans_d4(0)
    , cmd_connect_ans_d3(0)
    , cmd_connect_ans_d2(0)
    , cmd_connect_ans_d1(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _command_type;
  _command_type command;

   typedef uint8_t _cmd_connect_ans_d7_type;
  _cmd_connect_ans_d7_type cmd_connect_ans_d7;

   typedef uint8_t _cmd_connect_ans_d6_type;
  _cmd_connect_ans_d6_type cmd_connect_ans_d6;

   typedef uint8_t _cmd_connect_ans_d5_type;
  _cmd_connect_ans_d5_type cmd_connect_ans_d5;

   typedef uint8_t _cmd_connect_ans_d4_type;
  _cmd_connect_ans_d4_type cmd_connect_ans_d4;

   typedef uint8_t _cmd_connect_ans_d3_type;
  _cmd_connect_ans_d3_type cmd_connect_ans_d3;

   typedef uint8_t _cmd_connect_ans_d2_type;
  _cmd_connect_ans_d2_type cmd_connect_ans_d2;

   typedef uint8_t _cmd_connect_ans_d1_type;
  _cmd_connect_ans_d1_type cmd_connect_ans_d1;





  typedef boost::shared_ptr< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> const> ConstPtr;

}; // struct AnsToCmdConnect_

typedef ::neobotix_usboard_msgs::AnsToCmdConnect_<std::allocator<void> > AnsToCmdConnect;

typedef boost::shared_ptr< ::neobotix_usboard_msgs::AnsToCmdConnect > AnsToCmdConnectPtr;
typedef boost::shared_ptr< ::neobotix_usboard_msgs::AnsToCmdConnect const> AnsToCmdConnectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator1> & lhs, const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.command == rhs.command &&
    lhs.cmd_connect_ans_d7 == rhs.cmd_connect_ans_d7 &&
    lhs.cmd_connect_ans_d6 == rhs.cmd_connect_ans_d6 &&
    lhs.cmd_connect_ans_d5 == rhs.cmd_connect_ans_d5 &&
    lhs.cmd_connect_ans_d4 == rhs.cmd_connect_ans_d4 &&
    lhs.cmd_connect_ans_d3 == rhs.cmd_connect_ans_d3 &&
    lhs.cmd_connect_ans_d2 == rhs.cmd_connect_ans_d2 &&
    lhs.cmd_connect_ans_d1 == rhs.cmd_connect_ans_d1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator1> & lhs, const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neobotix_usboard_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1ef60b13020f0e599d4fbb33f17b3f1";
  }

  static const char* value(const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1ef60b13020f0e5ULL;
  static const uint64_t static_value2 = 0x99d4fbb33f17b3f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neobotix_usboard_msgs/AnsToCmdConnect";
  }

  static const char* value(const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for AnsToCmdConnect\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8     command                                 \n"
"uint8     cmd_connect_ans_d7                      \n"
"uint8     cmd_connect_ans_d6                      \n"
"uint8     cmd_connect_ans_d5                      \n"
"uint8     cmd_connect_ans_d4                      \n"
"uint8     cmd_connect_ans_d3                      \n"
"uint8     cmd_connect_ans_d2                      \n"
"uint8     cmd_connect_ans_d1                      \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command);
      stream.next(m.cmd_connect_ans_d7);
      stream.next(m.cmd_connect_ans_d6);
      stream.next(m.cmd_connect_ans_d5);
      stream.next(m.cmd_connect_ans_d4);
      stream.next(m.cmd_connect_ans_d3);
      stream.next(m.cmd_connect_ans_d2);
      stream.next(m.cmd_connect_ans_d1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnsToCmdConnect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neobotix_usboard_msgs::AnsToCmdConnect_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "cmd_connect_ans_d7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d7);
    s << indent << "cmd_connect_ans_d6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d6);
    s << indent << "cmd_connect_ans_d5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d5);
    s << indent << "cmd_connect_ans_d4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d4);
    s << indent << "cmd_connect_ans_d3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d3);
    s << indent << "cmd_connect_ans_d2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d2);
    s << indent << "cmd_connect_ans_d1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_connect_ans_d1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEOBOTIX_USBOARD_MSGS_MESSAGE_ANSTOCMDCONNECT_H
