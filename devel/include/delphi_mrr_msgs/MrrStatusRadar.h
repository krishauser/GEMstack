// Generated by gencpp from file delphi_mrr_msgs/MrrStatusRadar.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSRADAR_H
#define DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSRADAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct MrrStatusRadar_
{
  typedef MrrStatusRadar_<ContainerAllocator> Type;

  MrrStatusRadar_()
    : header()
    , can_interference_type(0)
    , can_recommend_unconverge(false)
    , can_blockage_sidelobe_filter_val(0)
    , can_radar_align_incomplete(false)
    , can_blockage_sidelobe(false)
    , can_blockage_mnr(false)
    , can_radar_ext_cond_nok(false)
    , can_radar_align_out_range(false)
    , can_radar_align_not_start(false)
    , can_radar_overheat_error(false)
    , can_radar_not_op(false)
    , can_xcvr_operational(false)  {
    }
  MrrStatusRadar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_interference_type(0)
    , can_recommend_unconverge(false)
    , can_blockage_sidelobe_filter_val(0)
    , can_radar_align_incomplete(false)
    , can_blockage_sidelobe(false)
    , can_blockage_mnr(false)
    , can_radar_ext_cond_nok(false)
    , can_radar_align_out_range(false)
    , can_radar_align_not_start(false)
    , can_radar_overheat_error(false)
    , can_radar_not_op(false)
    , can_xcvr_operational(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_interference_type_type;
  _can_interference_type_type can_interference_type;

   typedef uint8_t _can_recommend_unconverge_type;
  _can_recommend_unconverge_type can_recommend_unconverge;

   typedef uint8_t _can_blockage_sidelobe_filter_val_type;
  _can_blockage_sidelobe_filter_val_type can_blockage_sidelobe_filter_val;

   typedef uint8_t _can_radar_align_incomplete_type;
  _can_radar_align_incomplete_type can_radar_align_incomplete;

   typedef uint8_t _can_blockage_sidelobe_type;
  _can_blockage_sidelobe_type can_blockage_sidelobe;

   typedef uint8_t _can_blockage_mnr_type;
  _can_blockage_mnr_type can_blockage_mnr;

   typedef uint8_t _can_radar_ext_cond_nok_type;
  _can_radar_ext_cond_nok_type can_radar_ext_cond_nok;

   typedef uint8_t _can_radar_align_out_range_type;
  _can_radar_align_out_range_type can_radar_align_out_range;

   typedef uint8_t _can_radar_align_not_start_type;
  _can_radar_align_not_start_type can_radar_align_not_start;

   typedef uint8_t _can_radar_overheat_error_type;
  _can_radar_overheat_error_type can_radar_overheat_error;

   typedef uint8_t _can_radar_not_op_type;
  _can_radar_not_op_type can_radar_not_op;

   typedef uint8_t _can_xcvr_operational_type;
  _can_xcvr_operational_type can_xcvr_operational;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> const> ConstPtr;

}; // struct MrrStatusRadar_

typedef ::delphi_mrr_msgs::MrrStatusRadar_<std::allocator<void> > MrrStatusRadar;

typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusRadar > MrrStatusRadarPtr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusRadar const> MrrStatusRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_interference_type == rhs.can_interference_type &&
    lhs.can_recommend_unconverge == rhs.can_recommend_unconverge &&
    lhs.can_blockage_sidelobe_filter_val == rhs.can_blockage_sidelobe_filter_val &&
    lhs.can_radar_align_incomplete == rhs.can_radar_align_incomplete &&
    lhs.can_blockage_sidelobe == rhs.can_blockage_sidelobe &&
    lhs.can_blockage_mnr == rhs.can_blockage_mnr &&
    lhs.can_radar_ext_cond_nok == rhs.can_radar_ext_cond_nok &&
    lhs.can_radar_align_out_range == rhs.can_radar_align_out_range &&
    lhs.can_radar_align_not_start == rhs.can_radar_align_not_start &&
    lhs.can_radar_overheat_error == rhs.can_radar_overheat_error &&
    lhs.can_radar_not_op == rhs.can_radar_not_op &&
    lhs.can_xcvr_operational == rhs.can_xcvr_operational;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dbdaa8c61c744a4f2863586bf997cac";
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dbdaa8c61c744a4ULL;
  static const uint64_t static_value2 = 0xf2863586bf997cacULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/MrrStatusRadar";
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8 can_interference_type\n"
"bool  can_recommend_unconverge\n"
"uint8 can_blockage_sidelobe_filter_val\n"
"bool  can_radar_align_incomplete\n"
"bool  can_blockage_sidelobe\n"
"bool  can_blockage_mnr\n"
"bool  can_radar_ext_cond_nok\n"
"bool  can_radar_align_out_range\n"
"bool  can_radar_align_not_start\n"
"bool  can_radar_overheat_error\n"
"bool  can_radar_not_op\n"
"bool  can_xcvr_operational\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_interference_type);
      stream.next(m.can_recommend_unconverge);
      stream.next(m.can_blockage_sidelobe_filter_val);
      stream.next(m.can_radar_align_incomplete);
      stream.next(m.can_blockage_sidelobe);
      stream.next(m.can_blockage_mnr);
      stream.next(m.can_radar_ext_cond_nok);
      stream.next(m.can_radar_align_out_range);
      stream.next(m.can_radar_align_not_start);
      stream.next(m.can_radar_overheat_error);
      stream.next(m.can_radar_not_op);
      stream.next(m.can_xcvr_operational);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MrrStatusRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::MrrStatusRadar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_interference_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_interference_type);
    s << indent << "can_recommend_unconverge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_recommend_unconverge);
    s << indent << "can_blockage_sidelobe_filter_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_blockage_sidelobe_filter_val);
    s << indent << "can_radar_align_incomplete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_align_incomplete);
    s << indent << "can_blockage_sidelobe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_blockage_sidelobe);
    s << indent << "can_blockage_mnr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_blockage_mnr);
    s << indent << "can_radar_ext_cond_nok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_ext_cond_nok);
    s << indent << "can_radar_align_out_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_align_out_range);
    s << indent << "can_radar_align_not_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_align_not_start);
    s << indent << "can_radar_overheat_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_overheat_error);
    s << indent << "can_radar_not_op: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_radar_not_op);
    s << indent << "can_xcvr_operational: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_xcvr_operational);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSRADAR_H
