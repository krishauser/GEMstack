// Generated by gencpp from file delphi_mrr_msgs/MrrStatusTempVolt.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSTEMPVOLT_H
#define DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSTEMPVOLT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct MrrStatusTempVolt_
{
  typedef MrrStatusTempVolt_<ContainerAllocator> Type;

  MrrStatusTempVolt_()
    : header()
    , can_batt_volts(0.0)
    , can_1_25_v(0.0)
    , can_5_v(0.0)
    , can_3_3_v_raw(0.0)
    , can_3_3_v_dac(0.0)
    , can_mmic_temp1(0)
    , can_processor_thermistor(0)
    , can_processor_temp1(0)  {
    }
  MrrStatusTempVolt_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_batt_volts(0.0)
    , can_1_25_v(0.0)
    , can_5_v(0.0)
    , can_3_3_v_raw(0.0)
    , can_3_3_v_dac(0.0)
    , can_mmic_temp1(0)
    , can_processor_thermistor(0)
    , can_processor_temp1(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _can_batt_volts_type;
  _can_batt_volts_type can_batt_volts;

   typedef float _can_1_25_v_type;
  _can_1_25_v_type can_1_25_v;

   typedef float _can_5_v_type;
  _can_5_v_type can_5_v;

   typedef float _can_3_3_v_raw_type;
  _can_3_3_v_raw_type can_3_3_v_raw;

   typedef float _can_3_3_v_dac_type;
  _can_3_3_v_dac_type can_3_3_v_dac;

   typedef int8_t _can_mmic_temp1_type;
  _can_mmic_temp1_type can_mmic_temp1;

   typedef int8_t _can_processor_thermistor_type;
  _can_processor_thermistor_type can_processor_thermistor;

   typedef int8_t _can_processor_temp1_type;
  _can_processor_temp1_type can_processor_temp1;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> const> ConstPtr;

}; // struct MrrStatusTempVolt_

typedef ::delphi_mrr_msgs::MrrStatusTempVolt_<std::allocator<void> > MrrStatusTempVolt;

typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusTempVolt > MrrStatusTempVoltPtr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::MrrStatusTempVolt const> MrrStatusTempVoltConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_batt_volts == rhs.can_batt_volts &&
    lhs.can_1_25_v == rhs.can_1_25_v &&
    lhs.can_5_v == rhs.can_5_v &&
    lhs.can_3_3_v_raw == rhs.can_3_3_v_raw &&
    lhs.can_3_3_v_dac == rhs.can_3_3_v_dac &&
    lhs.can_mmic_temp1 == rhs.can_mmic_temp1 &&
    lhs.can_processor_thermistor == rhs.can_processor_thermistor &&
    lhs.can_processor_temp1 == rhs.can_processor_temp1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4200163646320431c4493e783122961d";
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4200163646320431ULL;
  static const uint64_t static_value2 = 0xc4493e783122961dULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/MrrStatusTempVolt";
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 can_batt_volts\n"
"float32 can_1_25_v\n"
"float32 can_5_v\n"
"float32 can_3_3_v_raw\n"
"float32 can_3_3_v_dac\n"
"int8    can_mmic_temp1\n"
"int8    can_processor_thermistor\n"
"int8    can_processor_temp1\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_batt_volts);
      stream.next(m.can_1_25_v);
      stream.next(m.can_5_v);
      stream.next(m.can_3_3_v_raw);
      stream.next(m.can_3_3_v_dac);
      stream.next(m.can_mmic_temp1);
      stream.next(m.can_processor_thermistor);
      stream.next(m.can_processor_temp1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MrrStatusTempVolt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::MrrStatusTempVolt_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_batt_volts: ";
    Printer<float>::stream(s, indent + "  ", v.can_batt_volts);
    s << indent << "can_1_25_v: ";
    Printer<float>::stream(s, indent + "  ", v.can_1_25_v);
    s << indent << "can_5_v: ";
    Printer<float>::stream(s, indent + "  ", v.can_5_v);
    s << indent << "can_3_3_v_raw: ";
    Printer<float>::stream(s, indent + "  ", v.can_3_3_v_raw);
    s << indent << "can_3_3_v_dac: ";
    Printer<float>::stream(s, indent + "  ", v.can_3_3_v_dac);
    s << indent << "can_mmic_temp1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.can_mmic_temp1);
    s << indent << "can_processor_thermistor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.can_processor_thermistor);
    s << indent << "can_processor_temp1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.can_processor_temp1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_MRRSTATUSTEMPVOLT_H
