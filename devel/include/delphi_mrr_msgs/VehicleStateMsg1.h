// Generated by gencpp from file delphi_mrr_msgs/VehicleStateMsg1.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H
#define DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct VehicleStateMsg1_
{
  typedef VehicleStateMsg1_<ContainerAllocator> Type;

  VehicleStateMsg1_()
    : header()
    , can_fcw_sensitivity_level(0)
    , can_vehicle_stationary(false)
    , can_intf_minor_version(0)
    , can_intf_major_version(0)
    , can_brake_pedal(0)
    , can_high_wheel_slip(false)
    , can_turn_signal_status(0)
    , can_washer_front_cmd(false)
    , can_wiper_front_cmd(false)
    , can_wiper_speed_info(0)
    , can_reverse_gear(false)
    , can_beam_shape_actual_right(0)
    , can_beam_shape_actual_left(0)
    , can_main_beam_indication(false)
    , can_vehicle_index(0)  {
    }
  VehicleStateMsg1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_fcw_sensitivity_level(0)
    , can_vehicle_stationary(false)
    , can_intf_minor_version(0)
    , can_intf_major_version(0)
    , can_brake_pedal(0)
    , can_high_wheel_slip(false)
    , can_turn_signal_status(0)
    , can_washer_front_cmd(false)
    , can_wiper_front_cmd(false)
    , can_wiper_speed_info(0)
    , can_reverse_gear(false)
    , can_beam_shape_actual_right(0)
    , can_beam_shape_actual_left(0)
    , can_main_beam_indication(false)
    , can_vehicle_index(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _can_fcw_sensitivity_level_type;
  _can_fcw_sensitivity_level_type can_fcw_sensitivity_level;

   typedef uint8_t _can_vehicle_stationary_type;
  _can_vehicle_stationary_type can_vehicle_stationary;

   typedef uint8_t _can_intf_minor_version_type;
  _can_intf_minor_version_type can_intf_minor_version;

   typedef uint8_t _can_intf_major_version_type;
  _can_intf_major_version_type can_intf_major_version;

   typedef uint8_t _can_brake_pedal_type;
  _can_brake_pedal_type can_brake_pedal;

   typedef uint8_t _can_high_wheel_slip_type;
  _can_high_wheel_slip_type can_high_wheel_slip;

   typedef uint8_t _can_turn_signal_status_type;
  _can_turn_signal_status_type can_turn_signal_status;

   typedef uint8_t _can_washer_front_cmd_type;
  _can_washer_front_cmd_type can_washer_front_cmd;

   typedef uint8_t _can_wiper_front_cmd_type;
  _can_wiper_front_cmd_type can_wiper_front_cmd;

   typedef uint8_t _can_wiper_speed_info_type;
  _can_wiper_speed_info_type can_wiper_speed_info;

   typedef uint8_t _can_reverse_gear_type;
  _can_reverse_gear_type can_reverse_gear;

   typedef uint8_t _can_beam_shape_actual_right_type;
  _can_beam_shape_actual_right_type can_beam_shape_actual_right;

   typedef uint8_t _can_beam_shape_actual_left_type;
  _can_beam_shape_actual_left_type can_beam_shape_actual_left;

   typedef uint8_t _can_main_beam_indication_type;
  _can_main_beam_indication_type can_main_beam_indication;

   typedef uint16_t _can_vehicle_index_type;
  _can_vehicle_index_type can_vehicle_index;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStateMsg1_

typedef ::delphi_mrr_msgs::VehicleStateMsg1_<std::allocator<void> > VehicleStateMsg1;

typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1 > VehicleStateMsg1Ptr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1 const> VehicleStateMsg1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_fcw_sensitivity_level == rhs.can_fcw_sensitivity_level &&
    lhs.can_vehicle_stationary == rhs.can_vehicle_stationary &&
    lhs.can_intf_minor_version == rhs.can_intf_minor_version &&
    lhs.can_intf_major_version == rhs.can_intf_major_version &&
    lhs.can_brake_pedal == rhs.can_brake_pedal &&
    lhs.can_high_wheel_slip == rhs.can_high_wheel_slip &&
    lhs.can_turn_signal_status == rhs.can_turn_signal_status &&
    lhs.can_washer_front_cmd == rhs.can_washer_front_cmd &&
    lhs.can_wiper_front_cmd == rhs.can_wiper_front_cmd &&
    lhs.can_wiper_speed_info == rhs.can_wiper_speed_info &&
    lhs.can_reverse_gear == rhs.can_reverse_gear &&
    lhs.can_beam_shape_actual_right == rhs.can_beam_shape_actual_right &&
    lhs.can_beam_shape_actual_left == rhs.can_beam_shape_actual_left &&
    lhs.can_main_beam_indication == rhs.can_main_beam_indication &&
    lhs.can_vehicle_index == rhs.can_vehicle_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bd8d57bd02218fdeffdb6496e73cbe0";
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bd8d57bd02218fdULL;
  static const uint64_t static_value2 = 0xeffdb6496e73cbe0ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/VehicleStateMsg1";
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8  can_fcw_sensitivity_level\n"
"bool   can_vehicle_stationary\n"
"uint8  can_intf_minor_version\n"
"uint8  can_intf_major_version\n"
"uint8  can_brake_pedal\n"
"bool   can_high_wheel_slip\n"
"uint8  can_turn_signal_status\n"
"bool   can_washer_front_cmd\n"
"bool   can_wiper_front_cmd\n"
"uint8  can_wiper_speed_info\n"
"bool   can_reverse_gear\n"
"uint8  can_beam_shape_actual_right\n"
"uint8  can_beam_shape_actual_left\n"
"bool   can_main_beam_indication\n"
"uint16 can_vehicle_index\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_fcw_sensitivity_level);
      stream.next(m.can_vehicle_stationary);
      stream.next(m.can_intf_minor_version);
      stream.next(m.can_intf_major_version);
      stream.next(m.can_brake_pedal);
      stream.next(m.can_high_wheel_slip);
      stream.next(m.can_turn_signal_status);
      stream.next(m.can_washer_front_cmd);
      stream.next(m.can_wiper_front_cmd);
      stream.next(m.can_wiper_speed_info);
      stream.next(m.can_reverse_gear);
      stream.next(m.can_beam_shape_actual_right);
      stream.next(m.can_beam_shape_actual_left);
      stream.next(m.can_main_beam_indication);
      stream.next(m.can_vehicle_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStateMsg1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_fcw_sensitivity_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_fcw_sensitivity_level);
    s << indent << "can_vehicle_stationary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_vehicle_stationary);
    s << indent << "can_intf_minor_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_intf_minor_version);
    s << indent << "can_intf_major_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_intf_major_version);
    s << indent << "can_brake_pedal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_brake_pedal);
    s << indent << "can_high_wheel_slip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_high_wheel_slip);
    s << indent << "can_turn_signal_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_turn_signal_status);
    s << indent << "can_washer_front_cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_washer_front_cmd);
    s << indent << "can_wiper_front_cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_wiper_front_cmd);
    s << indent << "can_wiper_speed_info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_wiper_speed_info);
    s << indent << "can_reverse_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_reverse_gear);
    s << indent << "can_beam_shape_actual_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_beam_shape_actual_right);
    s << indent << "can_beam_shape_actual_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_beam_shape_actual_left);
    s << indent << "can_main_beam_indication: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_main_beam_indication);
    s << indent << "can_vehicle_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.can_vehicle_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H
