// Generated by gencpp from file delphi_mrr_msgs/ActiveFaultLatched2.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED2_H
#define DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct ActiveFaultLatched2_
{
  typedef ActiveFaultLatched2_<ContainerAllocator> Type;

  ActiveFaultLatched2_()
    : header()
    , ipma_pcan_data_range_check(false)
    , ipma_pcan_missing_msg(false)
    , vin_signal_compare_failure(false)
    , module_not_configured_error(false)
    , car_cfg_not_configured_error(false)  {
    }
  ActiveFaultLatched2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ipma_pcan_data_range_check(false)
    , ipma_pcan_missing_msg(false)
    , vin_signal_compare_failure(false)
    , module_not_configured_error(false)
    , car_cfg_not_configured_error(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ipma_pcan_data_range_check_type;
  _ipma_pcan_data_range_check_type ipma_pcan_data_range_check;

   typedef uint8_t _ipma_pcan_missing_msg_type;
  _ipma_pcan_missing_msg_type ipma_pcan_missing_msg;

   typedef uint8_t _vin_signal_compare_failure_type;
  _vin_signal_compare_failure_type vin_signal_compare_failure;

   typedef uint8_t _module_not_configured_error_type;
  _module_not_configured_error_type module_not_configured_error;

   typedef uint8_t _car_cfg_not_configured_error_type;
  _car_cfg_not_configured_error_type car_cfg_not_configured_error;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> const> ConstPtr;

}; // struct ActiveFaultLatched2_

typedef ::delphi_mrr_msgs::ActiveFaultLatched2_<std::allocator<void> > ActiveFaultLatched2;

typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched2 > ActiveFaultLatched2Ptr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched2 const> ActiveFaultLatched2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ipma_pcan_data_range_check == rhs.ipma_pcan_data_range_check &&
    lhs.ipma_pcan_missing_msg == rhs.ipma_pcan_missing_msg &&
    lhs.vin_signal_compare_failure == rhs.vin_signal_compare_failure &&
    lhs.module_not_configured_error == rhs.module_not_configured_error &&
    lhs.car_cfg_not_configured_error == rhs.car_cfg_not_configured_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator1> & lhs, const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcd978d054e184e337e27e3c35da2f6d";
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcd978d054e184e3ULL;
  static const uint64_t static_value2 = 0x37e27e3c35da2f6dULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/ActiveFaultLatched2";
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"bool ipma_pcan_data_range_check\n"
"bool ipma_pcan_missing_msg\n"
"bool vin_signal_compare_failure\n"
"bool module_not_configured_error\n"
"bool car_cfg_not_configured_error\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ipma_pcan_data_range_check);
      stream.next(m.ipma_pcan_missing_msg);
      stream.next(m.vin_signal_compare_failure);
      stream.next(m.module_not_configured_error);
      stream.next(m.car_cfg_not_configured_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActiveFaultLatched2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::ActiveFaultLatched2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ipma_pcan_data_range_check: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ipma_pcan_data_range_check);
    s << indent << "ipma_pcan_missing_msg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ipma_pcan_missing_msg);
    s << indent << "vin_signal_compare_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vin_signal_compare_failure);
    s << indent << "module_not_configured_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_not_configured_error);
    s << indent << "car_cfg_not_configured_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.car_cfg_not_configured_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED2_H
