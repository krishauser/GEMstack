From 3fcd14a5b50ac03eed439d80cd74bc056f83c7eb Mon Sep 17 00:00:00 2001
From: Praveen Kalva <praveenkalva@icloud.com>
Date: Wed, 19 Feb 2025 02:10:41 +0000
Subject: [PATCH 056/150] added safety factor scale

---
 testing/test_comfort_metrics.py | 69 +++++++++++++++++++++++----------
 1 file changed, 49 insertions(+), 20 deletions(-)

diff --git a/testing/test_comfort_metrics.py b/testing/test_comfort_metrics.py
index 158e33c3..69372bcc 100644
--- a/testing/test_comfort_metrics.py
+++ b/testing/test_comfort_metrics.py
@@ -1,6 +1,14 @@
 import json
 import sys
 import matplotlib.pyplot as plt
+import matplotlib.cm as cm 
+import matplotlib.colors as mcolors
+import numpy as np
+
+ACC_SAFE = 0.8 # |acceleration| <= 2.0 m/s² is safe 
+ACC_UNSAFE = 2.0 # |acceleration| >= 3.0 m/s² is unsafe
+HR_SAFE = 0.05 # |heading_rate| <= 0.1 rad/s is safe 
+HR_UNSAFE = 0.2 # |heading_rate| >= 0.3 rad/s is unsafe
 
 def parse_log(filename):
     """Reads a JSON log file and extracts time, acceleration, and heading_rate"""
@@ -25,40 +33,61 @@ def parse_log(filename):
                     times.append(t)
                     accelerations.append(acceleration)
                     heading_rates.append(heading_rate)
-    return times, accelerations, heading_rates
+    
+    return np.array(times), np.array(accelerations), np.array(heading_rates)
+
+def compute_safety_factor(value, safe_thresh, unsafe_thresh):
+    """Computes a safety factor between 0 and 1 to be used by plots"""
+    abs_val = abs(value)
+    if abs_val <= safe_thresh:
+        return 1.0
+    elif abs_val >= unsafe_thresh:
+        return 0.0
+    else:
+        return 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
 
 def plot_metrics(times, accelerations, heading_rates):
     """Creates two subplots:
         - Instantaneous acceleration vs. time
         - Heading rate vs. time
     """
-    plt.figure(figsize=(12, 8))
-    # Plot acceleration
-    plt.subplot(2, 1, 1)
-    plt.plot(times, accelerations, 'b-', marker='o', label="Acceleration (m/s²)")
-    plt.xlabel("Time (s)")
-    plt.ylabel("Acceleration (m/s²)")
-    plt.title("Vehicle Acceleration Over Time")
-    plt.legend()
-    plt.grid(True)
+    # Compute safety factors for acceleration and heading rate
+    acc_safety = np.vectorize(compute_safety_factor)(accelerations, ACC_SAFE, ACC_UNSAFE)
+    hr_safety = np.vectorize(compute_safety_factor)(heading_rates, HR_SAFE, HR_UNSAFE)
 
-    # Plot heading rate
-    plt.subplot(2, 1, 2)
-    plt.plot(times, heading_rates, 'r-', marker='x', label="Heading Rate (rad/s)")
-    plt.xlabel("Time (s)")
-    plt.ylabel("Heading Rate (rad/s)")
-    plt.title("Vehicle Heading Rate Over Time")
-    plt.legend()
-    plt.grid(True)
+    fig, axs = plt.subplots(2, 1, figsize=(12, 8))
+    cmap = cm.get_cmap('RdYlGn')
+    # Plot acceleration with scatter coloring
+    sc1 = axs[0].scatter(times, accelerations, c=acc_safety, cmap=cmap, vmin=0, vmax=1, marker='o')
+    axs[0].plot(times, accelerations, color='gray', alpha=0.5, linestyle='--')
+    axs[0].set_xlabel("Time (s)")
+    axs[0].set_ylabel("Acceleration (m/s²)")
+    axs[0].set_title("Vehicle Acceleration Over Time")
+    axs[0].grid(True)
+    cbar1 = fig.colorbar(sc1, ax=axs[0])
+    cbar1.set_label("Safety Factor (1=safe, 0=unsafe)")
+
+    # Plot heading rate with scatter coloring
+    sc2 = axs[1].scatter(times, heading_rates, c=hr_safety, cmap=cmap, vmin=0, vmax=1, marker='x')
+    axs[1].plot(times, heading_rates, color='gray', alpha=0.5, linestyle='--')
+    axs[1].set_xlabel("Time (s)")
+    axs[1].set_ylabel("Heading Rate (rad/s)")
+    axs[1].set_title("Vehicle Heading Rate Over Time")
+    axs[1].grid(True)
+    cbar2 = fig.colorbar(sc2, ax=axs[1])
+    cbar2.set_label("Safety Factor (1=safe, 0=unsafe)")
 
     plt.tight_layout()
     plt.show()
 
-def main():
+if __name__=='__main__':
     if len(sys.argv) != 2:
         print("Usage: python test_comfort_metrics.py <log_file>.json")
         sys.exit(1)
 
     filename = sys.argv[1]
     times, accelerations, heading_rates = parse_log(filename)
-    plot_metrics(times, accelerations, heading_rates)
\ No newline at end of file
+    plot_metrics(times, accelerations, heading_rates)
+
+    print("Max (abs) acceleration:", np.max(np.abs(accelerations)))
+    print("Max (abs) heading rate:", np.max(np.abs(heading_rates)))
\ No newline at end of file
-- 
2.38.1

