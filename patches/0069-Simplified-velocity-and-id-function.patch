From 0de5980fbfa15dde2fc05b347b7b49f4555cbf61 Mon Sep 17 00:00:00 2001
From: LucasEby <lucaseby@outlook.com>
Date: Sat, 22 Feb 2025 17:48:37 -0500
Subject: [PATCH 069/150] Simplified velocity and id function

---
 .../onboard/perception/pedestrian_detection.py    | 15 ++++++---------
 1 file changed, 6 insertions(+), 9 deletions(-)

diff --git a/GEMstack/onboard/perception/pedestrian_detection.py b/GEMstack/onboard/perception/pedestrian_detection.py
index 7be48138..f8d14fde 100644
--- a/GEMstack/onboard/perception/pedestrian_detection.py
+++ b/GEMstack/onboard/perception/pedestrian_detection.py
@@ -34,6 +34,7 @@ import os
 from typing import List, Dict
 from collections import defaultdict
 from datetime import datetime
+import copy
 # ROS, CV
 import rospy
 import message_filters
@@ -238,9 +239,6 @@ class PedestrianDetector2D(Component):
         
 
     def update_object_states(self, track_result: List[Results], extracted_pts_all: List[np.ndarray]) -> None:
-        # self.prev_agents = self.current_agents.copy()
-        self.current_agents.clear()
-
         # Return if no track results available
         if track_result[0].boxes.id == None:
             return
@@ -285,8 +283,7 @@ class PedestrianDetector2D(Component):
     # TODO: Moving Average across last N iterations pos/vel? Less spurious vals
     # TODO Fix velocity calculation to calculate in ObjectFrameEnum.START
     def find_vels_and_ids(self, agents: List[AgentState]):
-        # self.prev_agents was assigned a deepcopy of self.current_agents and then self.current_agents
-        # was cleared before this function was called
+        self.current_agents.clear()
 
         # Nothing was scanned, erase current (for current output) and previous list (for next time through because nothing was scanned)
         if (len(agents) == 0):
@@ -319,12 +316,11 @@ class PedestrianDetector2D(Component):
                     agents[idx].activity = AgentActivityEnum.STOPPED if (np.all(vel == 0) or vel.size == 0) else AgentActivityEnum.MOVING
                     agents[idx].velocity = (0, 0, 0) if vel.size == 0 else tuple(vel)
 
-                    self.current_agents[prev_id] = agents[idx]
+                    self.current_agents[prev_id] = copy.deepcopy(agents[idx])
                     del self.prev_agents[prev_id] # Remove previous agent from previous agents so it doesn't get assigned multiple times on accident
                     break
             
             if not assigned:
-                print("not assigned")
                 # Set velocity to 0 and assign the new agent a new id with IdTracker
                 id = self.id_tracker.get_new_id()
                 
@@ -332,7 +328,8 @@ class PedestrianDetector2D(Component):
                 agents[idx].track_id = id
                 agents[idx].activity = AgentActivityEnum.UNDETERMINED
                 agents[idx].velocity = (0, 0, 0)
-                self.current_agents[id] = agents[idx]
+                self.current_agents[id] = copy.deepcopy(agents[idx])
+        self.prev_agents = copy.deepcopy(self.current_agents)
 
     # Calculates whether 2 agents overlap in START frame. True if they do, false if not
     def agents_overlap(self, curr_agent: AgentState, prev_agent: AgentState) -> bool:
@@ -350,7 +347,7 @@ class PedestrianDetector2D(Component):
         x2_min, x2_max = prev_agent.pose.x - prev_agent.dimensions[0] / 2.0, prev_agent.pose.x + prev_agent.dimensions[0] / 2.0
         y2_min, y2_max = prev_agent.pose.y, prev_agent.pose.y + prev_agent.dimensions[1] # AGENT STATE CALCULATION
         z2_min, z2_max = prev_agent.pose.z - prev_agent.dimensions[2] / 2.0, prev_agent.pose.z + prev_agent.dimensions[2] / 2.0
-        
+
         # True if they overlap, false if not
         return (
             ( (x1_min <= x2_min and x2_min <= x1_max) or (x2_min <= x1_min and x1_min <= x2_max) ) and
-- 
2.38.1

