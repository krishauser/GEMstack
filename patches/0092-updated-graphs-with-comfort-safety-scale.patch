From 49d1bc66139eda2d4ea1f62e4ee1c186449cd567 Mon Sep 17 00:00:00 2001
From: pravshot <praveenkalva@icloud.com>
Date: Tue, 25 Feb 2025 14:53:36 -0600
Subject: [PATCH 092/150] updated graphs with comfort/safety scale

---
 testing/test_comfort_metrics.py | 161 ++++++++++++++++----------------
 1 file changed, 79 insertions(+), 82 deletions(-)

diff --git a/testing/test_comfort_metrics.py b/testing/test_comfort_metrics.py
index db80a3c8..b65491e6 100644
--- a/testing/test_comfort_metrics.py
+++ b/testing/test_comfort_metrics.py
@@ -2,16 +2,13 @@ import json
 import sys
 import os
 import matplotlib.pyplot as plt
+import matplotlib.colors as mcolors
 import numpy as np
 
-# Safety thresholds (not used in the current plots)
-ACC_SAFE = 0.8    # |acceleration| <= 0.8 m/s² is safe 
-ACC_UNSAFE = 2.0  # |acceleration| >= 2.0 m/s² is unsafe
-HR_SAFE = 0.05    # |heading_rate| <= 0.05 rad/s is safe 
-HR_UNSAFE = 0.2   # |heading_rate| >= 0.2 rad/s is unsafe
+CMAP = "RdYlGn"
 
 def compute_safety_factor(value, safe_thresh, unsafe_thresh):
-    """Computes a safety factor between 0 and 1 (for coloring in plots)"""
+    """Computes a safety factor between 0(unsafe) and 1(safe)"""
     abs_val = abs(value)
     if abs_val <= safe_thresh:
         return 1.0
@@ -47,7 +44,7 @@ def parse_behavior_log(filename):
 
 def parse_tracker_csv(filename):
     """
-      - Crosstrack error time (from column index 18)
+      - vehicle time (from column index 18)
       - Crosstrack error (from column index 20)
       - X position actual (from column index 2)
       - Y position actual (from column index 5)
@@ -55,46 +52,27 @@ def parse_tracker_csv(filename):
       - Y position desired (from column index 14)
     """
     data = np.genfromtxt(filename, delimiter=',', skip_header=1)
-    cte_time = data[:, 18]
+    vehicle_time = data[:, 18]
     cte = data[:, 20]
     x_actual, y_actual = data[:, 2], data[:, 5]
     x_desired, y_desired = data[:, 11], data[:, 14]
-    return cte_time, cte, x_actual, y_actual, x_desired, y_desired
+    return vehicle_time, cte, x_actual, y_actual, x_desired, y_desired
 
-
-def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte, x_actual, y_actual, x_desired, y_desired):
+def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, x_actual, y_actual, x_desired, y_desired):
     """Plots jerk, heading acceleration, and cross-track error in subplots."""
     fig, axs = plt.subplots(2, 2, figsize=(12, 8))
-    fig.subplots_adjust(hspace=0.4, wspace=0.3)
-
-    # Jerk plot
-    axs[0,0].plot(time_jerk, jerk, marker='o', linestyle='-', color='blue')
-    axs[0,0].set_ylabel("Jerk (m/s³)")
-    axs[0,0].set_title("Vehicle Jerk Over Time")
-    axs[0,0].grid(True)
-
-    # Heading acceleration plot
-    axs[0,1].plot(time_heading_acc, heading_acc, marker='x', linestyle='-', color='orange')
-    axs[0,1].set_ylabel("Heading Acceleration (rad/s²)")
-    axs[0,1].set_title("Vehicle Heading Acceleration Over Time")
-    axs[0,1].grid(True)
-
-    # Cross track error plot
-    axs[1,0].plot(cte_time, cte, marker='s', linestyle='-', color='green')
-    axs[1,0].set_xlabel("Time (s)")
-    axs[1,0].set_ylabel("Cross Track Error")
-    axs[1,0].set_title("Vehicle Cross Track Error Over Time")
-    axs[1,0].grid(True)
-    
-    # Position plot
-    axs[1,1].plot(x_actual, y_actual, marker='o', linestyle='-', color='blue', label='Actual')
-    axs[1,1].plot(x_desired, y_desired, marker='x', linestyle='-', color='orange', label='Desired')
-    axs[1,1].set_xlabel("X Position (m)")
-    axs[1,1].set_ylabel("Y Position (m)")
-    axs[1,1].set_title("Vehicle Position")
-    axs[1,1].legend()
-    axs[1,1].grid(True)
+    fig.subplots_adjust(hspace=0.375, wspace=0.35)
 
+    plot_jerk(axs[0,0], time_jerk, jerk)
+    plot_heading_acceleration(axs[0,1], time_heading_acc, heading_acc)
+    plot_crosstrack_error(axs[1,0], vehicle_time, cte)
+    plot_position(axs[1,1], x_actual, y_actual, x_desired, y_desired)
+    
+    cbar_ax = fig.add_axes([0.92, 0.2, 0.02, 0.6])  # Position for the colorbar
+    sm = plt.cm.ScalarMappable(cmap=CMAP)
+    cbar = fig.colorbar(sm, cax=cbar_ax)
+    cbar.set_label("Comfort/Safety Level")
+    
     plt.show()
 
 def compute_derivative(times, values):
@@ -107,47 +85,65 @@ def compute_derivative(times, values):
     derivative = dv / dt
     return times[1:], derivative
 
-def plot_jerk(time, jerk):
+def plot_jerk(axis, time, jerk, safe_thresh=1.0, unsafe_thresh=2.5):
     """Plots vehicle jerk (rate of acceleration) vs. time"""
-    plt.figure(figsize=(12, 6))
-    plt.plot(time, jerk, marker='o', linestyle='-', color='blue')
-    plt.xlabel("Time (s)")
-    plt.ylabel("Jerk (m/s³)")
-    plt.title("Vehicle Jerk Over Time")
-    plt.grid(True)
-    plt.show()
+    safety_scores = np.vectorize(compute_safety_factor)(jerk, safe_thresh, unsafe_thresh)
+    
+    axis.plot(time, jerk, color="black", linewidth=0.8, alpha=0.5)
+    scatter = axis.scatter(time, jerk, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
 
-def plot_heading_acceleration(time, heading_acc):
-    """Plots vehicle heading acceleration vs. time"""
-    plt.figure(figsize=(12, 6))
-    plt.plot(time, heading_acc, marker='x', linestyle='-', color='orange')
-    plt.xlabel("Time (s)")
-    plt.ylabel("Heading Acceleration (rad/s²)")
-    plt.title("Vehicle Heading Acceleration Over Time")
-    plt.grid(True)
-    plt.show()
+    axis.set_xlabel("Time (s)")
+    axis.set_ylabel("Jerk (m/s³)")
+    axis.set_title("Vehicle Jerk Over Time")
+    axis.grid(True)
+    # cbar = plt.colorbar(scatter, ax=axis)
+    # cbar.set_label("Comfort Level")
 
-def plot_crosstrack_error(time, cte):
-    """Plots vehicle cross track error vs. time"""
-    plt.figure(figsize=(12, 6))
-    plt.plot(time, cte, marker='s', linestyle='-', color='green')
-    plt.xlabel("Time (s)")
-    plt.ylabel("Cross Track Error")
-    plt.title("Vehicle Cross Track Error Over Time")
-    plt.grid(True)
-    plt.show()
 
-def plot_position(time, x_actual, y_actual, x_desired, y_desired):
+def plot_heading_acceleration(axis, time, heading_acc, safe_thresh=0.0075, unsafe_thresh=0.25):
+    """Plots vehicle heading acceleration vs. time"""
+    safety_scores = np.vectorize(compute_safety_factor)(heading_acc, safe_thresh, unsafe_thresh)
+    
+    axis.plot(time, heading_acc, color="black", linewidth=0.8, alpha=0.5)
+    scatter = axis.scatter(time, heading_acc, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    
+    axis.set_xlabel("Time (s)")
+    axis.set_ylabel("Heading Acceleration (rad/s²)")
+    axis.set_title("Vehicle Heading Acceleration Over Time")
+    axis.grid(True)
+    # cbar = plt.colorbar(scatter, ax=axis)
+    # cbar.set_label("Comfort Level")
+
+def plot_crosstrack_error(axis, time, cte, safe_thresh=0.1, unsafe_thresh=0.4):
+    """Plots vehicle cross track error vs. time"""
+    safety_scores = np.vectorize(compute_safety_factor)(cte, safe_thresh, unsafe_thresh)
+    
+    axis.plot(time, cte, color="black", linewidth=0.8, alpha=0.5)
+    scatter = axis.scatter(time, cte, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    
+    axis.set_xlabel("Time (s)")
+    axis.set_ylabel("Cross Track Error")
+    axis.set_title("Vehicle Cross Track Error Over Time")
+    axis.grid(True)
+    # cbar = plt.colorbar(scatter, ax=axis)
+    # cbar.set_label("Safety Level")
+
+def plot_position(axis, x_actual, y_actual, x_desired, y_desired, safe_thresh=1, unsafe_thresh=2.5):
     """Plots vehicle actual and desired positions vs. time"""
-    plt.figure(figsize=(12, 6))
-    plt.plot(x_actual, y_actual, marker='o', linestyle='-', color='blue', label='Actual')
-    plt.plot(x_desired, y_desired, marker='x', linestyle='-', color='orange', label='Desired')
-    plt.xlabel("X Position (m)")
-    plt.ylabel("Y Position (m)")
-    plt.title("Vehicle Position Over Time")
-    plt.legend()
-    plt.grid(True)
-    plt.show()
+    position_error = np.sqrt((x_desired - x_actual) ** 2 + (y_desired - y_actual) ** 2)
+    safety_scores = np.vectorize(compute_safety_factor)(position_error, safe_thresh, unsafe_thresh)
+    
+    axis.plot(y_desired, x_desired, marker='.', linestyle=':', color='blue', label='Desired')
+    axis.plot(y_actual, x_actual, color="black", linewidth=0.8, alpha=0.5)
+    scatter = axis.scatter(y_actual, x_actual, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    
+    axis.set_xlabel("Y Position (m)")
+    axis.set_ylabel("X Position (m)")
+    axis.set_title("Vehicle Position vs. Desired Position")
+    axis.legend()
+    axis.grid(True)
+    # cbar = plt.colorbar(scatter, ax=axis)
+    # cbar.set_label("Safety Level")
 
 
 if __name__=='__main__':
@@ -160,13 +156,14 @@ if __name__=='__main__':
     tracker_file = os.path.join(log_dir, "PurePursuitTrajectoryTracker_debug.csv")
     
     times, accelerations, heading_rates = parse_behavior_log(behavior_file)
+    vehicle_time, cte, x_actual, y_actual, x_desired, y_desired = parse_tracker_csv(tracker_file)
+    # calculate derivatives
     time_jerk, jerk = compute_derivative(times, accelerations)
     time_heading_acc, heading_acc = compute_derivative(times, heading_rates)
     
-    cte_time, cte, x_actual, y_actual, x_desired, y_desired = parse_tracker_csv(tracker_file)
-    
-    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte, x_actual, y_actual, x_desired, y_desired)
+    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, x_actual, y_actual, x_desired, y_desired)
     
-    print("Max (abs) jerk:", np.max(np.abs(jerk)))
-    print("Max (abs) heading acceleration:", np.max(np.abs(heading_acc)))
-    print("Max (abs) cross track error:", np.max(np.abs(cte)))
\ No newline at end of file
+    print("RMS Jerk:", np.sqrt(np.mean(jerk**2)), "m/s³")
+    print("RMS Heading Acceleration:", np.sqrt(np.mean(heading_acc**2)), "rad/s²")
+    print("RMS Cross Track Error:", np.sqrt(np.mean(cte**2)), "m")
+    print("RMS Position Error:", np.sqrt(np.mean((x_actual - x_desired)**2 + (y_actual - y_desired)**2)), 'm')
\ No newline at end of file
-- 
2.38.1

