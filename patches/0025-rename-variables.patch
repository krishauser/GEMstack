From ced4804737f8c90264c50bb7e5b88e8029b4edc0 Mon Sep 17 00:00:00 2001
From: KenC1014 <kenken4016@gmail.com>
Date: Fri, 14 Feb 2025 22:33:34 -0600
Subject: [PATCH 025/150] rename variables

---
 GEMstack/onboard/perception/fusion.py       | 32 +++++++--------------
 GEMstack/onboard/perception/fusion_utils.py | 15 ++++++++++
 2 files changed, 26 insertions(+), 21 deletions(-)

diff --git a/GEMstack/onboard/perception/fusion.py b/GEMstack/onboard/perception/fusion.py
index 5299e345..d98cbac6 100644
--- a/GEMstack/onboard/perception/fusion.py
+++ b/GEMstack/onboard/perception/fusion.py
@@ -2,12 +2,12 @@ from cv_bridge import CvBridge
 from sensor_msgs.msg import Image, PointCloud2
 from ultralytics import YOLO
 from fusion_utils import *
-import open3d as o3d
 import rospy
 import message_filters
 import os
 import tf
 
+
 class Fusion3D():
     def __init__(self):
         # Setup variables
@@ -22,7 +22,7 @@ class Fusion3D():
         # Load calibration data
         self.R = load_extrinsics(os.getcwd() + '/GEMstack/onboard/perception/calibration/extrinsics/R.npy')
         self.t = load_extrinsics(os.getcwd() + '/GEMstack/onboard/perception/calibration/extrinsics/t.npy')
-        self.K = load_intrinsics(os.getcwd()+ '/GEMstack/onboard/perception/calibration/camera_intrinsics.json')
+        self.K = load_intrinsics(os.getcwd() + '/GEMstack/onboard/perception/calibration/camera_intrinsics.json')
 
         # Subscribers and sychronizers
         self.rgb_rosbag = message_filters.Subscriber('/oak/rgb/image_raw', Image)
@@ -38,32 +38,22 @@ class Fusion3D():
             self.pub_image = rospy.Publisher("/camera/image_detection", Image, queue_size=1)
 
 
-
-    def fusion_callback(self, image: Image, lidar_pc2_msg: PointCloud2):
-        image = self.bridge.imgmsg_to_cv2(image, "bgr8") 
-        track_result = self.detector.track(source=image, classes=self.classes_to_detect, persist=True, conf=self.confidence)
+    def fusion_callback(self, rgb_image_msg: Image, lidar_pc2_msg: PointCloud2):
+        cv_image = self.bridge.imgmsg_to_cv2(rgb_image_msg, "bgr8") 
+        track_result = self.detector.track(source=cv_image, classes=self.classes_to_detect, persist=True, conf=self.confidence)
 
         # Convert 1D PointCloud2 data to x, y, z coords
         lidar_points = convert_pointcloud2_to_xyz(lidar_pc2_msg)
 
-        # Convert numpy array to Open3D point cloud
-        pcd = o3d.geometry.PointCloud()
-        pcd.points = o3d.utility.Vector3dVector(lidar_points)
-
-        # Apply voxel grid downsampling
-        voxel_size = 0.1  # Adjust for desired resolution
-        downsampled_pcd = pcd.voxel_down_sample(voxel_size=voxel_size)
-
-        # Convert back to numpy array
-        transformed_points = np.asarray(downsampled_pcd.points)
+        # Downsample xyz point clouds
+        downsampled_points = downsample_points(lidar_points)
         
         # Transform LiDAR points into the camera coordinate frame.
-        lidar_in_camera = transform_lidar_points(transformed_points, self.R, self.t)
+        lidar_in_camera = transform_lidar_points(downsampled_points, self.R, self.t)
     
         # Project the transformed points into the image plane.
         projected_pts = project_points(lidar_in_camera, self.K)
 
-        
         # Process bboxes
         self.last_person_boxes = []
         boxes = track_result[0].boxes
@@ -93,15 +83,15 @@ class Fusion3D():
             
             # Used for visualization
             if(self.visualization):
-                image = vis_2d_bbox(image, xywh, box)
+                cv_image = vis_2d_bbox(cv_image, xywh, box)
         
         # Draw projected LiDAR points on the image.
         for pt in all_extracted_pts:
-            cv2.circle(image, pt, 2, (0, 0, 255), -1)
+            cv2.circle(cv_image, pt, 2, (0, 0, 255), -1)
         
         # Used for visualization
         if(self.visualization):
-            ros_img = self.bridge.cv2_to_imgmsg(image, 'bgr8')
+            ros_img = self.bridge.cv2_to_imgmsg(cv_image, 'bgr8')
             self.pub_image.publish(ros_img)  
 
 
diff --git a/GEMstack/onboard/perception/fusion_utils.py b/GEMstack/onboard/perception/fusion_utils.py
index e0408bb4..24b61366 100644
--- a/GEMstack/onboard/perception/fusion_utils.py
+++ b/GEMstack/onboard/perception/fusion_utils.py
@@ -11,6 +11,21 @@ def convert_pointcloud2_to_xyz(lidar_pc2_msg: PointCloud2):
     return np.array(list(pc2.read_points(lidar_pc2_msg, skip_nans=True)), dtype=np.float32)[:, :3]
 
 
+def downsample_points(lidar_points):
+    """ Downsample point clouds """
+    # Convert numpy array to Open3D point cloud
+    pcd = o3d.geometry.PointCloud()
+    pcd.points = o3d.utility.Vector3dVector(lidar_points)
+
+    # Apply voxel grid downsampling
+    voxel_size = 0.1  # Adjust for desired resolution
+    downsampled_pcd = pcd.voxel_down_sample(voxel_size=voxel_size)
+
+    # Convert back to numpy array
+    transformed_points = np.asarray(downsampled_pcd.points)
+    return transformed_points
+
+
 # Credits: The following lines of codes (17 to 159 excluding lines 80 to 115) are adapted from the Calibration Team B
 def load_extrinsics(extrinsics_file):
     """
-- 
2.38.1

