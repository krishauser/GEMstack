From c14d7af6bafc17259b69c15af7ffb441b0c759ce Mon Sep 17 00:00:00 2001
From: pravshot <praveenkalva@icloud.com>
Date: Tue, 25 Feb 2025 17:57:46 -0600
Subject: [PATCH 094/150] added pedestrian distance metric and cleaned code

---
 testing/test_comfort_metrics.py | 161 ++++++++++++++++++++++----------
 1 file changed, 113 insertions(+), 48 deletions(-)

diff --git a/testing/test_comfort_metrics.py b/testing/test_comfort_metrics.py
index b65491e6..1baf26a5 100644
--- a/testing/test_comfort_metrics.py
+++ b/testing/test_comfort_metrics.py
@@ -1,27 +1,46 @@
-import json
 import sys
 import os
+sys.path.append(os.getcwd())
+
+from GEMstack.state import AgentEnum
+import json
 import matplotlib.pyplot as plt
-import matplotlib.colors as mcolors
 import numpy as np
 
 CMAP = "RdYlGn"
 
-def compute_safety_factor(value, safe_thresh, unsafe_thresh):
-    """Computes a safety factor between 0(unsafe) and 1(safe)"""
+def compute_safety_factor(value, safe_thresh, unsafe_thresh, flip=False):
+    """
+    Computes a safety factor between 0(unsafe) and 1(safe)
+    If flip is True, the threshold bounds are reversed.
+    """
     abs_val = abs(value)
     if abs_val <= safe_thresh:
-        return 1.0
+        factor = 1.0
     elif abs_val >= unsafe_thresh:
-        return 0.0
+        factor = 0.0
     else:
-        return 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
+        factor = 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
+    
+    if flip:
+        return 1.0 - factor
+    return factor
 
 def parse_behavior_log(filename):
+    """
+    Parses the behavior log file and extracts the following data:
+    - vehicle time
+    - vehicle acceleration
+    - vehicle heading rate
+    - pedestrian time
+    - pedestrian distance
+    """
     times = []
     accelerations = []
     heading_rates = []
-
+    pedestrian_times = []
+    pedestrian_distances = []
+    
     with open(filename, 'r') as f:
         for line in f:
             try:
@@ -29,21 +48,38 @@ def parse_behavior_log(filename):
             except json.JSONDecodeError:
                 print(f"Skipping invalid JSON line: {line.strip()}")
                 continue
+            # Process vehicle state data
             if "vehicle" in entry:
                 t = entry.get("time")
                 vehicle_data = entry["vehicle"].get("data", {})
                 acceleration = vehicle_data.get("acceleration")
                 heading_rate = vehicle_data.get("heading_rate")
-                # Only add if all required fields are available
-                if t is not None and acceleration is not None and heading_rate is not None:
+                # Only add if all fields are available
+                if None not in (t, acceleration, heading_rate):
                     times.append(t)
                     accelerations.append(acceleration)
                     heading_rates.append(heading_rate)
+            # Process agent state data
+            if "agents" in entry:
+                for agent in entry["agents"].values():
+                    agent_data = agent.get("data", {})
+                    # Check if the agent is a pedestrian
+                    if agent_data.get("type") == AgentEnum.PEDESTRIAN.value:
+                        t = entry.get("time")
+                        pose = agent_data.get("pose", {})
+                        x_agent = pose.get("x")
+                        y_agent = pose.get("y")
+                        if None not in (t, x_agent, y_agent):
+                            pedestrian_times.append(t)
+                            dist = np.sqrt(x_agent**2 + y_agent**2)
+                            pedestrian_distances.append(dist)
     
-    return np.array(times), np.array(accelerations), np.array(heading_rates)
+    return (np.array(times), np.array(accelerations), np.array(heading_rates), 
+            np.array(pedestrian_times), np.array(pedestrian_distances))
 
 def parse_tracker_csv(filename):
     """
+    Parses the pure pursuit tracker log file and extracts the following data:
       - vehicle time (from column index 18)
       - Crosstrack error (from column index 20)
       - X position actual (from column index 2)
@@ -58,23 +94,6 @@ def parse_tracker_csv(filename):
     x_desired, y_desired = data[:, 11], data[:, 14]
     return vehicle_time, cte, x_actual, y_actual, x_desired, y_desired
 
-def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, x_actual, y_actual, x_desired, y_desired):
-    """Plots jerk, heading acceleration, and cross-track error in subplots."""
-    fig, axs = plt.subplots(2, 2, figsize=(12, 8))
-    fig.subplots_adjust(hspace=0.375, wspace=0.35)
-
-    plot_jerk(axs[0,0], time_jerk, jerk)
-    plot_heading_acceleration(axs[0,1], time_heading_acc, heading_acc)
-    plot_crosstrack_error(axs[1,0], vehicle_time, cte)
-    plot_position(axs[1,1], x_actual, y_actual, x_desired, y_desired)
-    
-    cbar_ax = fig.add_axes([0.92, 0.2, 0.02, 0.6])  # Position for the colorbar
-    sm = plt.cm.ScalarMappable(cmap=CMAP)
-    cbar = fig.colorbar(sm, cax=cbar_ax)
-    cbar.set_label("Comfort/Safety Level")
-    
-    plt.show()
-
 def compute_derivative(times, values):
     """
     Computes the derivative of array with respect to time.
@@ -85,48 +104,66 @@ def compute_derivative(times, values):
     derivative = dv / dt
     return times[1:], derivative
 
+def add_safety_colorbar(figure):
+    """Adds a colorbar to the right of the figure"""
+    cbar_ax = figure.add_axes([0.92, 0.2, 0.02, 0.6])
+    sm = plt.cm.ScalarMappable(cmap=CMAP)
+    cbar = figure.colorbar(sm, cax=cbar_ax)
+    cbar.set_label("Comfort/Safety Level")
+
+def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, 
+                 x_actual, y_actual, x_desired, y_desired, pedestrian_times, pedestrian_distances):
+    """Plots all metrics in 2x3 grid"""
+    fig, axs = plt.subplots(2, 3, figsize=(12, 8))
+    fig.subplots_adjust(hspace=0.375, wspace=0.35)
+    axs[1,2].axis('off')
+
+    plot_jerk(axs[0,0], time_jerk, jerk)
+    plot_heading_acceleration(axs[0,1], time_heading_acc, heading_acc)
+    plot_crosstrack_error(axs[1,0], vehicle_time, cte)
+    plot_position(axs[1,1], x_actual, y_actual, x_desired, y_desired)
+    plot_pedestrian_dist(axs[0,2], pedestrian_times, pedestrian_distances)
+    
+    # Colorbar on the right side
+    add_safety_colorbar(fig)
+    
+    plt.show()
+
 def plot_jerk(axis, time, jerk, safe_thresh=1.0, unsafe_thresh=2.5):
     """Plots vehicle jerk (rate of acceleration) vs. time"""
     safety_scores = np.vectorize(compute_safety_factor)(jerk, safe_thresh, unsafe_thresh)
     
     axis.plot(time, jerk, color="black", linewidth=0.8, alpha=0.5)
-    scatter = axis.scatter(time, jerk, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    axis.scatter(time, jerk, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
 
     axis.set_xlabel("Time (s)")
     axis.set_ylabel("Jerk (m/s³)")
     axis.set_title("Vehicle Jerk Over Time")
     axis.grid(True)
-    # cbar = plt.colorbar(scatter, ax=axis)
-    # cbar.set_label("Comfort Level")
-
 
 def plot_heading_acceleration(axis, time, heading_acc, safe_thresh=0.0075, unsafe_thresh=0.25):
     """Plots vehicle heading acceleration vs. time"""
     safety_scores = np.vectorize(compute_safety_factor)(heading_acc, safe_thresh, unsafe_thresh)
     
     axis.plot(time, heading_acc, color="black", linewidth=0.8, alpha=0.5)
-    scatter = axis.scatter(time, heading_acc, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    axis.scatter(time, heading_acc, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
     
     axis.set_xlabel("Time (s)")
     axis.set_ylabel("Heading Acceleration (rad/s²)")
     axis.set_title("Vehicle Heading Acceleration Over Time")
     axis.grid(True)
-    # cbar = plt.colorbar(scatter, ax=axis)
-    # cbar.set_label("Comfort Level")
 
 def plot_crosstrack_error(axis, time, cte, safe_thresh=0.1, unsafe_thresh=0.4):
     """Plots vehicle cross track error vs. time"""
     safety_scores = np.vectorize(compute_safety_factor)(cte, safe_thresh, unsafe_thresh)
     
     axis.plot(time, cte, color="black", linewidth=0.8, alpha=0.5)
-    scatter = axis.scatter(time, cte, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    axis.scatter(time, cte, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
     
     axis.set_xlabel("Time (s)")
     axis.set_ylabel("Cross Track Error")
     axis.set_title("Vehicle Cross Track Error Over Time")
     axis.grid(True)
-    # cbar = plt.colorbar(scatter, ax=axis)
-    # cbar.set_label("Safety Level")
 
 def plot_position(axis, x_actual, y_actual, x_desired, y_desired, safe_thresh=1, unsafe_thresh=2.5):
     """Plots vehicle actual and desired positions vs. time"""
@@ -135,16 +172,24 @@ def plot_position(axis, x_actual, y_actual, x_desired, y_desired, safe_thresh=1,
     
     axis.plot(y_desired, x_desired, marker='.', linestyle=':', color='blue', label='Desired')
     axis.plot(y_actual, x_actual, color="black", linewidth=0.8, alpha=0.5)
-    scatter = axis.scatter(y_actual, x_actual, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    axis.scatter(y_actual, x_actual, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
     
     axis.set_xlabel("Y Position (m)")
     axis.set_ylabel("X Position (m)")
     axis.set_title("Vehicle Position vs. Desired Position")
     axis.legend()
     axis.grid(True)
-    # cbar = plt.colorbar(scatter, ax=axis)
-    # cbar.set_label("Safety Level")
 
+def plot_pedestrian_dist(axis, pedestrian_times, pedestrian_distances, safe_thresh=5.0, unsafe_thresh=2.0):
+    """Plots pedestrian distance to vehicle vs. time"""
+    safety_scores = np.vectorize(compute_safety_factor)(pedestrian_distances, safe_thresh, unsafe_thresh, flip=True)
+    axis.plot(pedestrian_times, pedestrian_distances, color="black", linewidth=0.8, alpha=0.5)
+    axis.scatter(pedestrian_times, pedestrian_distances, c=safety_scores, cmap=CMAP, vmin=0, vmax=1, edgecolors="black")
+    
+    axis.set_xlabel("Time (s)")
+    axis.set_ylabel("Pedestrian Distance (m)")
+    axis.set_title("Pedestrian Distance Over Time")
+    axis.grid(True)
 
 if __name__=='__main__':
     if len(sys.argv) != 2:
@@ -155,15 +200,35 @@ if __name__=='__main__':
     behavior_file = os.path.join(log_dir, "behavior.json")
     tracker_file = os.path.join(log_dir, "PurePursuitTrajectoryTracker_debug.csv")
     
-    times, accelerations, heading_rates = parse_behavior_log(behavior_file)
-    vehicle_time, cte, x_actual, y_actual, x_desired, y_desired = parse_tracker_csv(tracker_file)
-    # calculate derivatives
+    # if behavior.json doesn't exist, print error and exit
+    if not os.path.exists(behavior_file):
+        print("Error: behavior.json file is missing in log folder.")
+        sys.exit(1)
+    
+    # Parse behavior log file and compute metrics
+    times, accelerations, heading_rates, ped_times, ped_distances = parse_behavior_log(behavior_file)
     time_jerk, jerk = compute_derivative(times, accelerations)
     time_heading_acc, heading_acc = compute_derivative(times, heading_rates)
     
-    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, x_actual, y_actual, x_desired, y_desired)
-    
+    # Pure pursuit tracker file exists: parse and plot all metrics
+    if os.path.exists(tracker_file):
+        vehicle_time, cte, x_actual, y_actual, x_desired, y_desired = parse_tracker_csv(tracker_file)
+        plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, vehicle_time, cte, 
+                     x_actual, y_actual, x_desired, y_desired, ped_times, ped_distances)
+        
+        print("RMS Cross Track Error:", np.sqrt(np.mean(cte**2)), "m")
+        print("RMS Position Error:", np.sqrt(np.mean((x_actual - x_desired)**2 + (y_actual - y_desired)**2)), 'm')
+    # Pure pursuit tracker file is missing: plot only behavior.json metrics
+    else:
+        print("Tracker file is missing. Skipping cross track error and vehicle position plots.")
+        # Plot only jerk, heading acceleration, and pedestrian distance
+        fig, axs = plt.subplots(1, 3, figsize=(12, 4))
+        plot_jerk(axs[0], time_jerk, jerk)
+        plot_heading_acceleration(axs[1], time_heading_acc, heading_acc)
+        plot_pedestrian_dist(axs[2], ped_times, ped_distances)
+        add_safety_colorbar(fig)
+        plt.show()
+        
     print("RMS Jerk:", np.sqrt(np.mean(jerk**2)), "m/s³")
     print("RMS Heading Acceleration:", np.sqrt(np.mean(heading_acc**2)), "rad/s²")
-    print("RMS Cross Track Error:", np.sqrt(np.mean(cte**2)), "m")
-    print("RMS Position Error:", np.sqrt(np.mean((x_actual - x_desired)**2 + (y_actual - y_desired)**2)), 'm')
\ No newline at end of file
+    print("Minimum Pedestrian Distance:", np.min(ped_distances), "m")
\ No newline at end of file
-- 
2.38.1

