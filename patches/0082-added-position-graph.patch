From 630933a85b9e9724f603aba3c31442f4c13136ae Mon Sep 17 00:00:00 2001
From: pravshot <praveenkalva@icloud.com>
Date: Mon, 24 Feb 2025 16:07:29 -0600
Subject: [PATCH 082/150] added position graph

---
 testing/test_comfort_metrics.py | 104 ++++++++++++++++++++------------
 1 file changed, 67 insertions(+), 37 deletions(-)

diff --git a/testing/test_comfort_metrics.py b/testing/test_comfort_metrics.py
index e186e5d1..db80a3c8 100644
--- a/testing/test_comfort_metrics.py
+++ b/testing/test_comfort_metrics.py
@@ -10,6 +10,16 @@ ACC_UNSAFE = 2.0  # |acceleration| >= 2.0 m/s² is unsafe
 HR_SAFE = 0.05    # |heading_rate| <= 0.05 rad/s is safe 
 HR_UNSAFE = 0.2   # |heading_rate| >= 0.2 rad/s is unsafe
 
+def compute_safety_factor(value, safe_thresh, unsafe_thresh):
+    """Computes a safety factor between 0 and 1 (for coloring in plots)"""
+    abs_val = abs(value)
+    if abs_val <= safe_thresh:
+        return 1.0
+    elif abs_val >= unsafe_thresh:
+        return 0.0
+    else:
+        return 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
+
 def parse_behavior_log(filename):
     times = []
     accelerations = []
@@ -35,39 +45,55 @@ def parse_behavior_log(filename):
     
     return np.array(times), np.array(accelerations), np.array(heading_rates)
 
-def compute_safety_factor(value, safe_thresh, unsafe_thresh):
-    """Computes a safety factor between 0 and 1 (for coloring in plots)"""
-    abs_val = abs(value)
-    if abs_val <= safe_thresh:
-        return 1.0
-    elif abs_val >= unsafe_thresh:
-        return 0.0
-    else:
-        return 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
+def parse_tracker_csv(filename):
+    """
+      - Crosstrack error time (from column index 18)
+      - Crosstrack error (from column index 20)
+      - X position actual (from column index 2)
+      - Y position actual (from column index 5)
+      - X position desired (from column index 11)
+      - Y position desired (from column index 14)
+    """
+    data = np.genfromtxt(filename, delimiter=',', skip_header=1)
+    cte_time = data[:, 18]
+    cte = data[:, 20]
+    x_actual, y_actual = data[:, 2], data[:, 5]
+    x_desired, y_desired = data[:, 11], data[:, 14]
+    return cte_time, cte, x_actual, y_actual, x_desired, y_desired
+
 
-def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte):
+def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte, x_actual, y_actual, x_desired, y_desired):
     """Plots jerk, heading acceleration, and cross-track error in subplots."""
-    fig, axs = plt.subplots(3, 1, figsize=(10, 12), sharex=True)
-    fig.subplots_adjust(hspace=0.4)
+    fig, axs = plt.subplots(2, 2, figsize=(12, 8))
+    fig.subplots_adjust(hspace=0.4, wspace=0.3)
 
     # Jerk plot
-    axs[0].plot(time_jerk, jerk, marker='o', linestyle='-', color='blue')
-    axs[0].set_ylabel("Jerk (m/s³)")
-    axs[0].set_title("Vehicle Jerk Over Time")
-    axs[0].grid(True)
+    axs[0,0].plot(time_jerk, jerk, marker='o', linestyle='-', color='blue')
+    axs[0,0].set_ylabel("Jerk (m/s³)")
+    axs[0,0].set_title("Vehicle Jerk Over Time")
+    axs[0,0].grid(True)
 
     # Heading acceleration plot
-    axs[1].plot(time_heading_acc, heading_acc, marker='x', linestyle='-', color='orange')
-    axs[1].set_ylabel("Heading Acceleration (rad/s²)")
-    axs[1].set_title("Vehicle Heading Acceleration Over Time")
-    axs[1].grid(True)
+    axs[0,1].plot(time_heading_acc, heading_acc, marker='x', linestyle='-', color='orange')
+    axs[0,1].set_ylabel("Heading Acceleration (rad/s²)")
+    axs[0,1].set_title("Vehicle Heading Acceleration Over Time")
+    axs[0,1].grid(True)
 
     # Cross track error plot
-    axs[2].plot(cte_time, cte, marker='s', linestyle='-', color='green')
-    axs[2].set_xlabel("Time (s)")
-    axs[2].set_ylabel("Cross Track Error")
-    axs[2].set_title("Vehicle Cross Track Error Over Time")
-    axs[2].grid(True)
+    axs[1,0].plot(cte_time, cte, marker='s', linestyle='-', color='green')
+    axs[1,0].set_xlabel("Time (s)")
+    axs[1,0].set_ylabel("Cross Track Error")
+    axs[1,0].set_title("Vehicle Cross Track Error Over Time")
+    axs[1,0].grid(True)
+    
+    # Position plot
+    axs[1,1].plot(x_actual, y_actual, marker='o', linestyle='-', color='blue', label='Actual')
+    axs[1,1].plot(x_desired, y_desired, marker='x', linestyle='-', color='orange', label='Desired')
+    axs[1,1].set_xlabel("X Position (m)")
+    axs[1,1].set_ylabel("Y Position (m)")
+    axs[1,1].set_title("Vehicle Position")
+    axs[1,1].legend()
+    axs[1,1].grid(True)
 
     plt.show()
 
@@ -81,16 +107,6 @@ def compute_derivative(times, values):
     derivative = dv / dt
     return times[1:], derivative
 
-def parse_tracker_csv(filename):
-    """
-      - Crosstrack error time (from column index 18)
-      - Crosstrack error (from column index 20)
-    """
-    data = np.genfromtxt(filename, delimiter=',', skip_header=1)
-    cte_time = data[:, 18]
-    cte = data[:, 20]
-    return cte_time, cte
-
 def plot_jerk(time, jerk):
     """Plots vehicle jerk (rate of acceleration) vs. time"""
     plt.figure(figsize=(12, 6))
@@ -121,6 +137,19 @@ def plot_crosstrack_error(time, cte):
     plt.grid(True)
     plt.show()
 
+def plot_position(time, x_actual, y_actual, x_desired, y_desired):
+    """Plots vehicle actual and desired positions vs. time"""
+    plt.figure(figsize=(12, 6))
+    plt.plot(x_actual, y_actual, marker='o', linestyle='-', color='blue', label='Actual')
+    plt.plot(x_desired, y_desired, marker='x', linestyle='-', color='orange', label='Desired')
+    plt.xlabel("X Position (m)")
+    plt.ylabel("Y Position (m)")
+    plt.title("Vehicle Position Over Time")
+    plt.legend()
+    plt.grid(True)
+    plt.show()
+
+
 if __name__=='__main__':
     if len(sys.argv) != 2:
         print("Usage: python test_comfort_metrics.py <log_directory>")
@@ -133,9 +162,10 @@ if __name__=='__main__':
     times, accelerations, heading_rates = parse_behavior_log(behavior_file)
     time_jerk, jerk = compute_derivative(times, accelerations)
     time_heading_acc, heading_acc = compute_derivative(times, heading_rates)
-    cte_time, cte = parse_tracker_csv(tracker_file)
     
-    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte)
+    cte_time, cte, x_actual, y_actual, x_desired, y_desired = parse_tracker_csv(tracker_file)
+    
+    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte, x_actual, y_actual, x_desired, y_desired)
     
     print("Max (abs) jerk:", np.max(np.abs(jerk)))
     print("Max (abs) heading acceleration:", np.max(np.abs(heading_acc)))
-- 
2.38.1

