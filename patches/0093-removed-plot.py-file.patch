From 176817fda79e739373c62cb99da359ea3ac2b785 Mon Sep 17 00:00:00 2001
From: pravshot <praveenkalva@icloud.com>
Date: Tue, 25 Feb 2025 14:55:09 -0600
Subject: [PATCH 093/150] removed plot.py file

---
 testing/plot.py | 207 ------------------------------------------------
 1 file changed, 207 deletions(-)
 delete mode 100644 testing/plot.py

diff --git a/testing/plot.py b/testing/plot.py
deleted file mode 100644
index 66f95149..00000000
--- a/testing/plot.py
+++ /dev/null
@@ -1,207 +0,0 @@
-import os
-import numpy as np
-import pandas as pd
-import matplotlib.pyplot as plt
-import json
-import argparse
-import sys
-
-# Safety thresholds (not used in the current plots)
-ACC_SAFE = 0.8    # |acceleration| <= 0.8 m/s² is safe 
-ACC_UNSAFE = 2.0  # |acceleration| >= 2.0 m/s² is unsafe
-HR_SAFE = 0.05    # |heading_rate| <= 0.05 rad/s is safe 
-HR_UNSAFE = 0.2   # |heading_rate| >= 0.2 rad/s is unsafe
-
-def plot_cross_track_error(folder, df):
-    t = df['curr pt[0] vehicle time'].tolist()
-    cte = df['crosstrack error'].tolist()
-    
-    rmse_cte = np.sqrt(np.mean(np.array(cte)**2))
-    print(f'RMSE (cte): {rmse_cte}')
-    
-    plt.figure()
-    plt.plot(t, cte)
-    plt.xlabel('$t$ (s)')
-    plt.ylabel('Crosstrack Error (m)')
-    plt.title(f'Crosstrack Error over Time (RMSE: {rmse_cte:.2f})')
-    plt.grid(True)
-    
-    plots_folder = os.path.join(folder, 'plots')
-    os.makedirs(plots_folder, exist_ok=True)
-    plt.savefig(os.path.join(plots_folder, 'cte.png'), dpi=600)
-    plt.show()
-
-def plot_x_vs_xd(folder, df):
-    t = df['curr pt[0] vehicle time'].tolist()
-    x = df['curr pt[0]'].tolist()
-    xd = df['desired pt[0]'].tolist()
-    
-    plt.figure()
-    plt.plot(t, x, label='Actual x')
-    plt.plot(t, xd, label='Desired x', linestyle='--')
-    
-    plt.xlabel('$t$ (s)')
-    plt.ylabel('X Coordinate (m)')
-    plt.title('Actual vs Desired X Coordinate Over Time')
-    plt.legend()
-    plt.grid(True)
-    
-    plots_folder = os.path.join(folder, 'plots')
-    os.makedirs(plots_folder, exist_ok=True)
-    plt.savefig(os.path.join(plots_folder, 'x_vs_xd.png'), dpi=600)
-    plt.show()
-
-def plot_y_vs_yd(folder, df):
-    t = df['curr pt[0] vehicle time'].tolist()
-    y = df['curr pt[1]'].tolist()
-    yd = df['desired pt[1]'].tolist()
-    
-    plt.figure()
-    plt.plot(t, y, label='Actual y')
-    plt.plot(t, yd, label='Desired y', linestyle='--')
-    
-    plt.xlabel('$t$ (s)')
-    plt.ylabel('Y Coordinate (m)')
-    plt.title('Actual vs Desired Y Coordinate Over Time')
-    plt.legend()
-    plt.grid(True)
-    
-    plots_folder = os.path.join(folder, 'plots')
-    os.makedirs(plots_folder, exist_ok=True)
-    plt.savefig(os.path.join(plots_folder, 'y_vs_yd.png'), dpi=600)
-    plt.show()
-
-def plot_x_y_vs_xd_yd(folder, df):
-    x = df['curr pt[0]'].tolist()
-    y = df['curr pt[1]'].tolist()
-    xd = df['desired pt[0]'].tolist()
-    yd = df['desired pt[1]'].tolist()
-    
-    plt.figure()
-    plt.plot(x, y, label='Actual Path')
-    plt.plot(xd, yd, label='Desired Path', linestyle='--')
-    
-    plt.xlabel('X Coordinate (m)')
-    plt.ylabel('Y Coordinate (m)')
-    plt.title('Actual vs Desired Path')
-    plt.legend()
-    plt.grid(True)
-    
-    plots_folder = os.path.join(folder, 'plots')
-    os.makedirs(plots_folder, exist_ok=True)
-    plt.savefig(os.path.join(plots_folder, 'x_y_vs_xd_yd.png'), dpi=600)
-    plt.show()
-
-def parse_behavior_log(filename):
-    times = []
-    accelerations = []
-    heading_rates = []
-
-    with open(filename, 'r') as f:
-        for line in f:
-            try:
-                entry = json.loads(line)
-            except json.JSONDecodeError:
-                print(f"Skipping invalid JSON line: {line.strip()}")
-                continue
-            if "vehicle" in entry:
-                t = entry.get("time")
-                vehicle_data = entry["vehicle"].get("data", {})
-                acceleration = vehicle_data.get("acceleration")
-                heading_rate = vehicle_data.get("heading_rate")
-                # Only add if all required fields are available
-                if t is not None and acceleration is not None and heading_rate is not None:
-                    times.append(t)
-                    accelerations.append(acceleration)
-                    heading_rates.append(heading_rate)
-    
-    return np.array(times), np.array(accelerations), np.array(heading_rates)
-
-def compute_safety_factor(value, safe_thresh, unsafe_thresh):
-    """Computes a safety factor between 0 and 1 (for coloring in plots)"""
-    abs_val = abs(value)
-    if abs_val <= safe_thresh:
-        return 1.0
-    elif abs_val >= unsafe_thresh:
-        return 0.0
-    else:
-        return 1.0 - (abs_val - safe_thresh) / (unsafe_thresh - safe_thresh)
-
-def compute_derivative(times, values):
-    """
-    Computes the derivative of array with respect to time.
-    Returns the time array and derivative values.
-    """
-    dt = np.diff(times)
-    dv = np.diff(values)
-    derivative = dv / dt
-    return times[1:], derivative
-
-def parse_tracker_csv(filename):
-    """
-      - Crosstrack error time (from column index 18)
-      - Crosstrack error (from column index 20)
-    """
-    data = np.genfromtxt(filename, delimiter=',', skip_header=1)
-    cte_time = data[:, 18]
-    cte = data[:, 20]
-    return cte_time, cte
-
-def plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte):
-    """Plots jerk, heading acceleration, and cross-track error in subplots."""
-    fig, axs = plt.subplots(3, 1, figsize=(10, 12), sharex=True)
-    fig.subplots_adjust(hspace=0.4)
-
-    # Jerk plot
-    axs[0].plot(time_jerk, jerk, marker='o', linestyle='-', color='blue')
-    axs[0].set_ylabel("Jerk (m/s³)")
-    axs[0].set_title("Vehicle Jerk Over Time")
-    axs[0].grid(True)
-
-    # Heading acceleration plot
-    axs[1].plot(time_heading_acc, heading_acc, marker='x', linestyle='-', color='orange')
-    axs[1].set_ylabel("Heading Acceleration (rad/s²)")
-    axs[1].set_title("Vehicle Heading Acceleration Over Time")
-    axs[1].grid(True)
-
-    # Cross track error plot
-    axs[2].plot(cte_time, cte, marker='s', linestyle='-', color='green')
-    axs[2].set_xlabel("Time (s)")
-    axs[2].set_ylabel("Cross Track Error")
-    axs[2].set_title("Vehicle Cross Track Error Over Time")
-    axs[2].grid(True)
-
-    plt.show()
-
-if __name__ == '__main__':
-    parser = argparse.ArgumentParser(description='Plot Crosstrack Error and Trajectory from a specified log folder.')
-    parser.add_argument('log_folder', type=str, help='Path to the log folder containing the log files')
-    args = parser.parse_args()
-
-    # CSV and JSON files from the folder
-    csv_file = os.path.join(args.log_folder, 'PurePursuitTrajectoryTracker_debug.csv')
-    behavior_file = os.path.join(args.log_folder, 'behavior.json')
-    
-    if not os.path.isfile(csv_file):
-        raise FileNotFoundError(f"CSV file not found in folder: {args.log_folder}")
-    
-    # Reading CSV (PurePursuitTrajectoryTracker_debug.csv)
-    df = pd.read_csv(csv_file)
-    
-    # Plotting Crosstrack Error and Trajectory-related metrics
-    plot_cross_track_error(args.log_folder, df)
-    plot_x_vs_xd(args.log_folder, df)
-    plot_y_vs_yd(args.log_folder, df)
-    plot_x_y_vs_xd_yd(args.log_folder, df)
-    
-    # Parsing behavior JSON and computing additional metrics
-    times, accelerations, heading_rates = parse_behavior_log(behavior_file)
-    time_jerk, jerk = compute_derivative(times, accelerations)
-    time_heading_acc, heading_acc = compute_derivative(times, heading_rates)
-    cte_time, cte = parse_tracker_csv(csv_file)
-    
-    plot_metrics(time_jerk, jerk, time_heading_acc, heading_acc, cte_time, cte)
-    
-    print("Max (abs) jerk:", np.max(np.abs(jerk)))
-    print("Max (abs) heading acceleration:", np.max(np.abs(heading_acc)))
-    print("Max (abs) cross track error:", np.max(np.abs(cte)))
-- 
2.38.1

