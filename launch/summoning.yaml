description: "Run the yielding trajectory planner on the real vehicle with real perception"
mode: hardware
vehicle_interface: gem_hardware.GEMHardwareInterface
mission_execution: StandardExecutor

# Recovery behavior after a component failure
recovery:
    planning:
        trajectory_tracking : recovery.StopTrajectoryTracker

# Driving behavior for the GEM vehicle.  Runs real pedestrian perception, yield planner, but does not send commands to real vehicle.
drive:
    perception:
        state_estimation : GNSSStateEstimator
#        agent_detection : cone_detection.ConeDetector3D
        perception_normalization : StandardPerceptionNormalizer
    planning:
#        relations_estimation: pedestrian_yield_logic.PedestrianYielder
        mission_planning:
            type: SummoningMissionPlanner
            args:
                use_webapp: false   # goal should be defined when use_webapp is false
                # Goal test points for summoning_roadgraph_sim.json, frame is 'start' or 'cartesian'.
                    # Key points:[0, 0], [0, 30], [37.5, 7.5], [33, 12]，[28.5, 7.5]，[15, 3], [1.5, 7.5], [15, 12], [-3, 12], [-7.5, 7.5]
                    # Points not in the lane:[15, -3], [15, 6], [15, 9], [15, 15]
                # Goal test points for summoning_roadgraph_highbay.json, frame is 'global'.
                    # Key points: [-88.235317, 40.0927934], [-88.235252, 40.0927527], [-88.235164, 40.0927934], [-88.235211, 40.0928573],
                    # [-88.235527, 40.0927436], [-88.235968, 40.0927432], [-88.236046, 40.0927917], [-88.236008, 40.0928604], [-88.235905, 40.0927917]
                goal: {'location':[5, -3], 'frame':'cartesian'}
                state_machine: [MissionEnum.IDLE, MissionEnum.SUMMONING_DRIVE, MissionEnum.PARALLEL_PARKING]
        route_planning:
            type: SummoningRoutePlanner
            # Arguments: [path/to/roadgraph, map_type, map_frame]
                # Roadgraph file extension must be ".json", ".yml", ".yaml", ".csv", ".txt".
                # Map_type is 'roadgraph' for ".json", ".yml", ".yaml", and 'pointlist' for ".csv", ".txt".
                # Make sure 'roadgraph' map_type match the structure of Roadgraph object.
                # 'pointlist' is a list of points, carefully define the goal to make sure it is in the lanes.
                # Map_frame should be 'global', 'cartesian, or 'start'.
            args: [!relative_path '../GEMstack/knowledge/routes/summoning_roadgraph_sim.json', 'roadgraph', 'cartesian']
            # args: [!relative_path '../GEMstack/knowledge/routes/summoning_roadgraph_highbay.json', 'roadgraph', 'global']
        motion_planning: longitudinal_planning.YieldTrajectoryPlanner
        trajectory_tracking:
            type: pure_pursuit.PurePursuitTrajectoryTracker
            print: False

log:
    # Specify the top-level folder to save the log files.  Default is 'logs'
    #folder : 'logs'
    # If prefix is specified, then the log folder will be named with the prefix followed by the date and time. Default no prefix
    #prefix : 'fixed_route_'
    # If suffix is specified, then logs will output to folder/prefix+suffix. Default uses date and time as the suffix
    #suffix : 'test3'
    # Specify which ros topics to record to vehicle.bag. Default records nothing. This records the "standard" ROS topics.
    ros_topics :
    # Specify options to pass to rosbag record. Default is no options.
    #rosbag_options : '--split --size=1024'
    # If True, then record all readings / commands of the vehicle interface. Default False
    vehicle_interface : True
    # Specify which components to record to behavior.json. Default records nothing
    components : ['state_estimation','agent_detection','motion_planning']
    # Specify which components of state to record to state.json. Default records nothing
    #state: ['all']
    # Specify the rate in Hz at which to record state to state.json. Default records at the pipeline's rate
    #state_rate: 10
replay:  # Add items here to set certain topics / inputs to be replayed from logs
    # Specify which log folder to replay from
    log:
    ros_topics : []
    components : []

#usually can keep this constant
computation_graph: !include "../GEMstack/knowledge/defaults/computation_graph.yaml"

variants:
    sim:
        run:
            description: "Run the yielding trajectory planner in simulation with faked perception"
            mode: simulation
            vehicle_interface:
                type: gem_simulator.GEMDoubleIntegratorSimulationInterface
                args:
                    scene: !relative_path '../scenes/summoning_demo.yaml'
            visualization: !include "klampt_visualization.yaml"
            drive:
                perception:
                    agent_detection : OmniscientAgentDetector  #this option reads agents from the simulator
                    state_estimation : OmniscientStateEstimator