description: "Drive the GEM vehicle along a fixed route (currently xyhead_highbay_backlot_p.csv)"
mode: hardware
vehicle_interface: gem_hardware.GEMHardwareInterface
mission_execution: StandardExecutor
# Recovery behavior after a component failure
recovery: 
    planning: 
        trajectory_tracking:
            type: recovery.StopTrajectoryTracker
            print: False
# Driving behavior for the GEM vehicle following a fixed route
drive: 
    perception:
        state_estimation : GNSSStateEstimator
        perception_normalization : StandardPerceptionNormalizer
        # agent_detection:
        #     type: agent_detection.GazeboAgentDetector
        #     args:
        #         tracked_model_prefixes: ['pedestrian', 'car', 'bicycle']

        # obstacle_detection:
        #     type: cone_detection.ConeDetector3D
        #     args:
        #         camera_name: front_right #[front, front_right]
        #         camera_calib_file: ./GEMstack/knowledge/calibration/cameras.yaml

        #         # optional overrides
        #         enable_tracking: False
        #         visualize_2d: False
        #         use_cyl_roi: False
        #         save_data: False
        #         orientation: False
        #         use_start_frame: False

    planning:
        relations_estimation: pedestrian_yield_logic.PedestrianYielder
                    # Fixed route with pure pursuit
        planning_component_example:
            type: PlanningComponentExample
        route_planning_component:
                        type: RoutePlanningComponentExample
        trajectory_tracking:
            type: pure_pursuit.PurePursuitTrajectoryTracker
            args: {desired_speed: 2.5}  #approximately 5mph
            print: False
        # route_planning:
        #     type: StaticRoutePlanner
        #     args: [!relative_path '../GEMstack/knowledge/routes/xyhead_highbay_backlot_p.csv'] # Fixed path
        
        # motion_planning: longitudinal_planning.YieldTrajectoryPlanner
        motion_planning: yield_spline_planner.SplinePlanner
log:
    # Specify the top-level folder to save the log files.  Default is 'logs'
    #folder : 'logs' 
    # If prefix is specified, then the log folder will be named with the prefix followed by the date and time. Default no prefix
    #prefix : 'fixed_route_'  
    # If suffix is specified, then logs will output to folder/prefix+suffix. Default uses date and time as the suffix
    #suffix : 'test3'  
    # Specify which ros topics to record to vehicle.bag. Default records nothing. This records the "standard" ROS topics.
    ros_topics : []
    # Specify options to pass to rosbag record. Default is no options.
    #rosbag_options : '--split --size=1024' 
    # If True, then record all readings / commands of the vehicle interface. Default False
    vehicle_interface : True
    # Specify which components to record to behavior.json. Default records nothing
    components : ['state_estimation','trajectory_tracking', 'agent_detection']
    # Specify which components of state to record to state.json. Default records nothing 
    #state: ['all']
    # Specify the rate in Hz at which to record state to state.json. Default records at the pipeline's rate
    #state_rate: 10
replay:  # Add items here to set certain topics / inputs to be replayed from logs
    # Specify which log folder to replay from
    log: 
    # For replaying sensor data, try !include "../knowledge/defaults/standard_sensor_ros_topics.yaml"
    ros_topics : []
    components : []

#usually can keep this constant
computation_graph: !include "../GEMstack/knowledge/defaults/computation_graph.yaml"

after:
    show_log_folder: True  #set to false to avoid showing the log folder

#on load, variants will overload the settings structure
variants:
    #sim variant doesn't execute on the real vehicle 
    #real variant executes on the real robot
    sim:
        run:
            mode: simulation
            vehicle_interface:
                type: gem_simulator.GEMDoubleIntegratorSimulationInterface
                args:
                    scene: !relative_path '../scenes/xyhead_demo.yaml'

            drive: 
                perception:
                    state_estimation : OmniscientStateEstimator
                    agent_detection : OmniscientAgentDetector
            # visualization: !include "klampt_visualization.yaml"
            visualization: [!include "mpl_visualization.yaml", !include "klampt_visualization.yaml"]
    gazebo:
        run:
            mode: simulation
            vehicle_interface:
                type: gem_gazebo.GEMGazeboInterface
            drive:
                perception:
                    state_estimation: GNSSStateEstimator  # Matches your Gazebo GNSS implementation
                    agent_detection:
                        type: agent_detection.GazeboAgentDetector
                        args:
                            tracked_model_prefixes: ['pedestrian', 'car', 'bicycle']

                    bstacle_detection:
                        type: obstacle_detection.GazeboObstacleDetector
                        args:
                            tracked_obstacle_prefixes: ['cone']
                    # perception_normalization : StandardPerceptionNormalizer
                    # obstacle_detection :
                    #     type: cone_detection.ConeDetector3D
                    #     args:
                    #         camera_name: front #[front, front_right]
                    #         camera_calib_file: ./GEMstack/knowledge/calibration/cameras.yaml
                    #         enable_tracking:  True   # True if you want to enable tracking
                    #         visualize_2d:     False  # True to see 2D detection visualization
                    #         use_cyl_roi:      False  # True to use a cylinder ROI
                    #         save_data:        False  # True to save sensor input data
                    #         orientation:      True   # True to detect flipped cones
                    #         use_start_frame:  True   # True to output in START frame

                planning:
                    # Adding your custom relation estimation
                    relations_estimation: pedestrian_yield_logic.PedestrianYielder
                    # Fixed route with pure pursuit
                    planning_component_example:
                        type: PlanningComponentExample
                    route_planning_component:
                        type: RoutePlanningComponentExample
                    # route_planning:
                    #     type: StaticRoutePlanner
                    #     args: [!relative_path '../GEMstack/knowledge/routes/xyhead_highbay_backlot_p.csv'] # Fixed path
                    
                    motion_planning: longitudinal_planning.YieldTrajectoryPlanner
                    # motion_planning: yield_spline_planner.SplinePlanner
                    trajectory_tracking:
                        type: pure_pursuit.PurePursuitTrajectoryTracker
                        args: {desired_speed: 'path'}  #approximately 5mph
                        print: True
    
            visualization: !include "mpl_visualization.yaml"
    log_ros:
        log:
            ros_topics : !include "../GEMstack/knowledge/defaults/standard_ros_topics.yaml"