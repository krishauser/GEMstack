FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04

ARG USER_UID=1000
ARG USER_GID=1000
ARG USER=ppuser

ENV DEBIAN_FRONTEND=noninteractive

# Use bash instead of sh
SHELL ["/bin/bash", "-c"]

# Install basic dependencies
RUN apt-get update && apt-get install -y git python3 python3-pip wget zstd sudo ninja-build

# Set time zone non-interactively
ENV TZ=America/Chicago
RUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone \
    && apt-get update && apt-get install -y tzdata \
    && rm -rf /var/lib/apt/lists/*

# Install ROS Noetic
RUN apt-get update && apt-get install -y lsb-release gnupg2
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros-latest.list'
RUN wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc
RUN apt-key add ros.asc
RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y ros-noetic-desktop
RUN apt-get install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential python3-catkin-tools

# Install JSK recognition messages package
RUN apt-get install -y ros-noetic-jsk-recognition-msgs

RUN rosdep init
RUN rosdep update

# Create a non-root user safely (with fixed username to avoid conflicts)
RUN groupadd -g ${USER_GID} ${USER} || echo "Group with GID ${USER_GID} already exists"
RUN useradd -l -m -u ${USER_UID} -g ${USER_GID} ${USER} || echo "User with UID ${USER_UID} already exists"
RUN echo "${USER} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Fix permissions for Python packages
RUN chown -R ${USER}:${USER} /usr/local/lib/python3.8/dist-packages/ \
    && chmod -R u+rw /usr/local/lib/python3.8/dist-packages/

# Create workspace directory
RUN mkdir -p /home/${USER}/pointpillars_ws

# Install PointPillars dependencies
RUN pip3 install rospkg catkin_pkg empy

# Set CUDA architecture flags explicitly
ENV TORCH_CUDA_ARCH_LIST="3.5;5.0;6.0;6.1;7.0;7.5;8.0;8.6"

# Clone PointPillars repository
WORKDIR /home/${USER}/pointpillars_ws
RUN git clone https://github.com/zhulf0804/PointPillars.git
WORKDIR /home/${USER}/pointpillars_ws/PointPillars

# Install PyTorch with exact version specified in requirements
RUN pip3 install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 \
       -f https://download.pytorch.org/whl/torch_stable.html

# Install all other dependencies from requirements.txt except open3d
RUN pip3 install numba==0.48.0 numpy==1.19.5 PyYAML==6.0 setuptools==58.0.4 tensorboard tqdm==4.62.3
RUN pip3 install opencv-python==4.5.5.62

# Install Open3D directly using a specific wheel for Python 3.8
RUN pip3 install --no-cache-dir --pre https://storage.googleapis.com/open3d-releases-master/python-wheels/open3d-0.14.1-cp38-cp38-linux_x86_64.whl || \
    pip3 install --no-cache-dir open3d==0.13.0

# Build and install PointPillars
RUN python3 setup.py build_ext --inplace
RUN pip3 install .

# Add ROS paths to bashrc
RUN echo "source /opt/ros/noetic/setup.bash" >> /home/${USER}/.bashrc

# Create startup script
RUN echo '#!/bin/bash' > /home/${USER}/start_node.sh \
    && echo 'cd /home/${USER}/pointpillars_ws' >> /home/${USER}/start_node.sh \
    && echo 'python3 point_pillars_node.py' >> /home/${USER}/start_node.sh \
    && chmod +x /home/${USER}/start_node.sh

# Set ownership of the workspace
RUN chown -R ${USER}:${USER} /home/${USER}

USER ${USER}
WORKDIR /home/${USER}/pointpillars_ws

# Command to run when the container starts
CMD ["/bin/bash", "-c", "/home/${USER}/start_node.sh"]
